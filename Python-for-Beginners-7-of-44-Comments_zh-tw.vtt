WEBVTT

00:00:04.580 --> 00:00:08.610
>> 現在，在你深入
學習編寫程式碼之前

00:00:08.610 --> 00:00:11.880
養成「寫註解」
這個習慣是很必要的

00:00:11.880 --> 00:00:15.195
註解是一種幫你的程式碼
寫文件的方法

00:00:15.195 --> 00:00:17.400
通過在一行
程式碼的開頭

00:00:17.400 --> 00:00:19.590
添加井字號

00:00:19.590 --> 00:00:21.720
這樣就把這行程式碼變成註解

00:00:21.720 --> 00:00:23.910
這意味著當執行到
這行程式碼時

00:00:23.910 --> 00:00:25.395
它什麼都不做

00:00:25.395 --> 00:00:28.860
註解用於提醒你自己
在這裡到底寫了甚麼東西

00:00:28.860 --> 00:00:30.330
或者幫助別人
在閱讀你的程式碼時

00:00:30.330 --> 00:00:33.015
理解你到底在寫甚麼

00:00:33.015 --> 00:00:34.890
所以當你執行到這一行時

00:00:34.890 --> 00:00:36.975
在被註解的情況下
你不會看到任何輸出

00:00:36.975 --> 00:00:39.120
事實上
你可以將註解放在

00:00:39.120 --> 00:00:41.210
你想要做實驗的程式碼之前

00:00:41.210 --> 00:00:42.890
也許你試了一行程式碼

00:00:42.890 --> 00:00:44.780
它的結果不符合預期
或符合預期

00:00:44.780 --> 00:00:46.150
你想嘗試改變一些東西

00:00:46.150 --> 00:00:47.880
與其直接刪除該行程式碼

00:00:47.880 --> 00:00:49.670
有時我會把該行
標示為註解

00:00:49.670 --> 00:00:52.100
重新執行
然後比較差異

00:00:52.100 --> 00:00:53.900
這樣我就可以
不用刪除舊的程式碼

00:00:53.900 --> 00:00:55.970
而只是標示為註解
以防我需要改回來

00:00:55.970 --> 00:00:57.335
所以註解是非常有用的

00:00:57.335 --> 00:00:59.000
在任何一行程式碼之前

00:00:59.000 --> 00:01:01.550
加上井字符號

00:01:01.550 --> 00:01:02.990
該行都不會被執行

00:01:02.990 --> 00:01:06.440
這是一個很好的習慣

00:01:06.440 --> 00:01:08.990
尤其當你要
呼叫一個函數或方法

00:01:08.990 --> 00:01:10.190
我們在之後的章節

00:01:10.190 --> 00:01:11.720
會介紹函數與方法

00:01:11.720 --> 00:01:12.990
但是如果你要
呼叫函數或方法

00:01:12.990 --> 00:01:16.025
在呼叫之前
加一行注釋來提醒自己

00:01:16.025 --> 00:01:17.435
這個函數是做甚麼用的？

00:01:17.435 --> 00:01:19.730
我為什麼要在這裡呼叫它？

00:01:19.730 --> 00:01:21.830
當你在寫這行程式碼的當下

00:01:21.830 --> 00:01:23.310
你可能很清楚為什麼

00:01:23.310 --> 00:01:25.850
但當你六個月之後再回來看

00:01:25.850 --> 00:01:29.555
或一年、甚至兩年後
你需要修Bug或進行改寫

00:01:29.555 --> 00:01:32.150
有很大的機會
你會忘了自己當初是怎麼想的

00:01:32.150 --> 00:01:34.070
所以你將會很感謝你自己

00:01:34.070 --> 00:01:35.990
在當初你還很清楚知道
自己在想甚麼的時候

00:01:35.990 --> 00:01:38.490
曾花時間寫了註解

00:01:39.530 --> 00:01:41.715
有時你為了讓
程式能順利執行

00:01:41.715 --> 00:01:43.580
不得不做一些古怪的事情

00:01:43.580 --> 00:01:46.640
例如你總是使用單引號
來圍繞所有字串

00:01:46.640 --> 00:01:49.730
然後突然你有一個
"print"述句使用雙引號

00:01:49.730 --> 00:01:51.095
你為什麼那麼做呢？

00:01:51.095 --> 00:01:53.675
也許應該添加一個小註解

00:01:53.675 --> 00:01:57.170
如果要輸出一個字串如：
"it's a small world after all"

00:01:57.170 --> 00:01:59.705
因為字串中有一個單引號

00:01:59.705 --> 00:02:02.900
所以我必須使用雙引號
來圍繞這個字串

00:02:02.900 --> 00:02:05.730
如你所見
我已經在此處添加了註解

00:02:05.730 --> 00:02:08.540
所以當其他人
讀到這行程式碼會明白

00:02:08.540 --> 00:02:11.870
為什麼我在所有的字串都用了單引號
單單就這一行用雙引號

00:02:11.870 --> 00:02:13.970
所以
當你寫出一些非常規的東西

00:02:13.970 --> 00:02:15.920
或者要去呼叫一個函數

00:02:15.920 --> 00:02:19.380
添加注釋可以讓其他人
更理解你的程式碼

00:02:20.470 --> 00:02:24.455
當你在除錯時
有註釋會非常有用

00:02:24.455 --> 00:02:27.110
尤其當你你有
一個很長的程式

00:02:27.110 --> 00:02:28.220
而你找不出

00:02:28.220 --> 00:02:29.885
到底哪一行出錯的時候

00:02:29.885 --> 00:02:31.970
有個我用過無數次的
除錯方法就是

00:02:31.970 --> 00:02:33.965
我把幾乎
所有的程式碼

00:02:33.965 --> 00:02:37.625
都變成註解

00:02:37.625 --> 00:02:42.020
然後只讓前五行執行

00:02:42.020 --> 00:02:43.640
如果前五行都沒問題

00:02:43.640 --> 00:02:45.920
再取消註解
下面五行

00:02:45.920 --> 00:02:48.750
有問題嗎？
仍然沒有錯誤訊息

00:02:48.750 --> 00:02:50.450
那就再取消註解
接下來的五行

00:02:50.450 --> 00:02:52.450
重複這個動作直到
我看到錯誤訊息

00:02:52.450 --> 00:02:54.170
這可以幫助我

00:02:54.170 --> 00:02:56.405
縮小尋找錯誤的範圍

00:02:56.405 --> 00:03:00.410
所以馬上養成這個習慣吧！
在程式碼中加入註解

00:03:00.410 --> 00:03:04.020
不論是用於記錄你當時的想法
或是為了除錯

