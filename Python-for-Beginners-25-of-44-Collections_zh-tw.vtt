WEBVTT

00:00:03.080 --> 00:00:06.375
>> 在前面的課程
我們已經了解

00:00:06.375 --> 00:00:09.240
如何在變數中存儲單別值

00:00:09.240 --> 00:00:12.915
但生活中並不是
只有單獨的項目

00:00:12.915 --> 00:00:15.690
有時候你會
有一群項目

00:00:15.690 --> 00:00:17.160
有時我們希望能夠

00:00:17.160 --> 00:00:19.185
將它們存儲在一起
就像一個列隊

00:00:19.185 --> 00:00:21.900
有時我們希望
能夠存儲它們

00:00:21.900 --> 00:00:25.950
進入一個小組
然後給小組一個名字

00:00:25.950 --> 00:00:28.650
這就是我們將
要介紹的概念

00:00:28.650 --> 00:00:30.060
各種集合物件

00:00:30.060 --> 00:00:32.865
包括：清單、陣列和字典

00:00:32.865 --> 00:00:34.635
好，讓我們從清單開始

00:00:34.635 --> 00:00:38.400
清單很簡單
就是單項的集合

00:00:38.400 --> 00:00:41.540
所以你看到我們已經宣告
一個名為"names"的變數

00:00:41.540 --> 00:00:44.750
使用方括弧把
多個值包圍起來

00:00:44.750 --> 00:00:46.430
讓我用螢光筆
把它圈起來

00:00:46.430 --> 00:00:50.270
方括號在這裡

00:00:50.270 --> 00:00:54.020
我們已經讓它等於
克里斯多夫和蘇珊

00:00:54.020 --> 00:00:57.275
只需在他們之間
加上逗號

00:00:57.275 --> 00:00:58.610
如果我呼叫"print"函數

00:00:58.610 --> 00:01:01.430
Python會簡單把它

00:01:01.430 --> 00:01:04.835
照實的輸出到螢幕上

00:01:04.835 --> 00:01:06.830
不過有一件事我
想要先強調的是

00:01:06.830 --> 00:01:09.185
雖然這裡我用了字串

00:01:09.185 --> 00:01:13.220
但實際上我可以
使用任何資料型別

00:01:13.220 --> 00:01:18.200
所以如果我有一個
回傳值的集合

00:01:18.200 --> 00:01:20.480
我可能從一些
外部服務取得

00:01:20.480 --> 00:01:23.100
傳回值可能是數字型別
或是誰知道什麼型別

00:01:23.100 --> 00:01:28.055
但我絕對可以存儲
所有型別到一個清單中

00:01:28.055 --> 00:01:31.730
而如果你事先不知道
會有那些值呢？

00:01:31.730 --> 00:01:33.500
也許你會以
程式的方法得到


00:01:33.500 --> 00:01:35.630
例如從"input"函數

00:01:35.630 --> 00:01:38.660
或其他的計算結果

00:01:38.660 --> 00:01:42.050
那麼在這種情況下

00:01:42.050 --> 00:01:45.875
你可以從一個空清單開始
就像我這裡寫的

00:01:45.875 --> 00:01:48.350
所以現在我得到了
一個空清單

00:01:48.350 --> 00:01:53.255
然後我可以呼叫"append"方法
從清單的尾巴添加項目

00:01:53.255 --> 00:01:55.100
在這個範例中

00:01:55.100 --> 00:01:56.480
我只是添加
一個數字進清單

00:01:56.480 --> 00:01:59.000
這是為了簡單起見

00:01:59.000 --> 00:02:01.550
但如果我從外部呼叫
例如"input"函數

00:02:01.550 --> 00:02:05.285
再將傳回值添加進清單
那結果也是一樣的

00:02:05.285 --> 00:02:07.040
如果我呼叫"print"

00:02:07.040 --> 00:02:09.380
它一樣會輸出到螢幕
跟我們以前看到的一樣

00:02:09.380 --> 00:02:13.460
但我想強調
事實上我們可以

00:02:13.460 --> 00:02:18.365
使用清單的索引
存取裡面的個別項目

00:02:18.365 --> 00:02:22.000
如果我說
"scores[1]"

00:02:22.000 --> 00:02:26.000
它實際上會傳回
清單中的第二個值

00:02:26.000 --> 00:02:29.030
原因是在Python中

00:02:29.030 --> 00:02:32.105
索引是從零開始

00:02:32.105 --> 00:02:35.780
因此所有計數從零開始

00:02:35.780 --> 00:02:39.475
Python也有陣列

00:02:39.475 --> 00:02:41.280
現在為了使用陣列

00:02:41.280 --> 00:02:43.230
這裡有一行不太一樣的語法

00:02:43.230 --> 00:02:47.225
你可能記得我們在

00:02:47.225 --> 00:02:49.070
學日期型別時也用過

00:02:49.070 --> 00:02:52.010
我們之後會有更多的介紹

00:02:52.010 --> 00:02:54.745
現在先讓我們專注在陣列

00:02:54.745 --> 00:03:01.025
array('d')就是宣告
我想要的陣列的資料型別

00:03:01.025 --> 00:03:02.330
在這個範例中

00:03:02.330 --> 00:03:06.160
我宣告一個
數字(digit)陣列

00:03:06.160 --> 00:03:08.555
這也就是縮寫'd'
所代表的意思

00:03:08.555 --> 00:03:12.380
如果你查看本課程
在Github的存儲庫

00:03:12.380 --> 00:03:14.000
你會看到有一個連結

00:03:14.000 --> 00:03:17.360
連到Python array的
說明文件

00:03:17.360 --> 00:03:19.100
可以在那裏查到
所有型別的縮寫

00:03:19.100 --> 00:03:23.140
所有的資料行別
都可以放入陣列中

00:03:23.140 --> 00:03:25.660
你可能有注意到

00:03:25.660 --> 00:03:28.085
以下的程式碼
基本上是相同的

00:03:28.085 --> 00:03:29.450
我想添加數字

00:03:29.450 --> 00:03:31.010
很好，只要呼叫"append()"

00:03:31.010 --> 00:03:33.425
我想輸出，OK
只需呼叫"print()"

00:03:33.425 --> 00:03:35.810
如果我想存取
某個項目

00:03:35.810 --> 00:03:37.850
就跟之前的方法一樣

00:03:37.850 --> 00:03:41.320
使用索引就能
得到完全相同的結果

00:03:41.320 --> 00:03:43.970
只是輸出的結果
有一些格式上的不同

00:03:43.970 --> 00:03:47.360
只是因為"d"實際上是
指浮點數資料型別

00:03:47.360 --> 00:03:49.610
說到這裡，你可能會說

00:03:49.610 --> 00:03:50.795
"等一下，克里斯多夫"

00:03:50.795 --> 00:03:54.790
那陣列和清單
到底有什麼區別？

00:03:54.790 --> 00:03:59.570
嗯，陣列只能儲存
單一型別的項目，例如數字

00:03:59.570 --> 00:04:01.490
陣列中的所有項目

00:04:01.490 --> 00:04:04.445
必須是相同的資料型別

00:04:04.445 --> 00:04:07.190
而清單就可以

00:04:07.190 --> 00:04:10.460
存儲任何型別的項目

00:04:10.460 --> 00:04:13.040
在投影片中
我用購物車來比喻

00:04:13.040 --> 00:04:14.390
你可以這樣想像

00:04:14.390 --> 00:04:16.460
清單可以讓你隨心所欲的

00:04:16.460 --> 00:04:18.560
放任何東西進去

00:04:18.560 --> 00:04:23.240
然後清單也會保留這些
不同型別的項目

00:04:23.240 --> 00:04:26.000
在大部分的程式中

00:04:26.000 --> 00:04:29.015
你都會使用清單

00:04:29.015 --> 00:04:33.470
除非你開始寫
資料分析的程式

00:04:33.470 --> 00:04:36.949
大概只有當你
寫資料分析的程式

00:04:36.949 --> 00:04:39.260
才會頻繁的使用

00:04:39.260 --> 00:04:42.455
各種較複雜的陣列型別

00:04:42.455 --> 00:04:46.730
好的，除了能用索引找到
陣列中的個別項目外

00:04:46.730 --> 00:04:49.960
我們還能怎麼操作清單？

00:04:49.960 --> 00:04:53.665
我們可以用len()函數
取得清單的長度

00:04:53.665 --> 00:04:57.025
也可以呼叫insert()函數

00:04:57.025 --> 00:05:00.780
將值放到我們指定的位置

00:05:00.780 --> 00:05:03.910
在這個例子裡

00:05:03.910 --> 00:05:07.795
它會把這個值放在
我們指定的索引值之前

00:05:07.795 --> 00:05:09.880
所以我這裡指定了零

00:05:09.880 --> 00:05:12.890
它就會插在第一個項目的前面
也就是最開始的地方

00:05:12.890 --> 00:05:14.990
但list的輔助方法還有很多

00:05:14.990 --> 00:05:17.740
例如我可以呼叫"sort()"

00:05:17.740 --> 00:05:21.490
在我範例中
會按照字母順序進行排序

00:05:21.490 --> 00:05:23.020
所以當我們執行這個程式時

00:05:23.020 --> 00:05:25.300
你會注意到，它會告訴我
我有兩個項目

00:05:25.300 --> 00:05:27.820
因為一開始我們
沒有插入比爾

00:05:27.820 --> 00:05:30.930
然後我呼叫"insert"
然後把比爾放進去

00:05:30.930 --> 00:05:33.250
它會把比爾
放在最前面

00:05:33.250 --> 00:05:35.680
最後我們呼叫"sort()"

00:05:35.680 --> 00:05:37.700
你會注意到

00:05:37.700 --> 00:05:41.400
它自動按字母排序

00:05:43.130 --> 00:05:48.725
最後在介紹一個
常用的方法

00:05:48.725 --> 00:05:53.830
可以在清單或陣列的
指定範圍內得到一個子集

00:05:53.830 --> 00:05:57.620
方法就是這個語法

00:05:57.620 --> 00:06:01.820
[0:2]

00:06:01.820 --> 00:06:03.590
這兩個參數

00:06:03.590 --> 00:06:06.880
第一個參數意思是

00:06:06.880 --> 00:06:09.335
我們要開始取值的地方

00:06:09.335 --> 00:06:12.770
0也就代表了從
最開始、第一個開始取

00:06:12.770 --> 00:06:17.655
第二個參數的意思是
「取到第幾個為止？」

00:06:17.655 --> 00:06:18.920
在這個例子中
[0:2]的意思就是

00:06:18.920 --> 00:06:23.080
從索引0開始、到索引2為止

00:06:23.080 --> 00:06:28.100
也就是取索引0跟索引1

00:06:28.100 --> 00:06:30.170
但不取索引2

00:06:30.170 --> 00:06:32.825
這裡常搞錯，要特別注意

00:06:32.825 --> 00:06:36.615
所以"presenters"這個清單

00:06:36.615 --> 00:06:38.600
是"names"的子集合

00:06:38.600 --> 00:06:41.250
當我們輸出它

00:06:41.250 --> 00:06:43.490
你會發現它只抓

00:06:43.490 --> 00:06:48.770
names的
第一個項目和第二個項目

00:06:48.770 --> 00:06:51.245
再講一次：
從索引0開始，抓到索引2為止

00:06:51.245 --> 00:06:53.390
但切記不包含
後面那個參數

00:06:53.390 --> 00:06:57.080
也就是不取索引2的值

00:06:57.080 --> 00:07:01.705
[0:2]的結果
就是取索引0跟索引1

00:07:01.705 --> 00:07:04.430
好的，再繼續介紹另一種集合物件

00:07:04.430 --> 00:07:07.040
字典

00:07:07.040 --> 00:07:13.220
看一下設定字典的語法

00:07:13.220 --> 00:07:17.120
如果你很熟悉JSON
(譯註：JavaScript Object Notation)

00:07:17.120 --> 00:07:20.190
你可能注意到
它的格式跟JSON很類似

00:07:20.190 --> 00:07:22.850
如果你不熟悉JSON

00:07:22.850 --> 00:07:24.800
也沒關係

00:07:24.800 --> 00:07:27.190
我們之後會介紹

00:07:27.190 --> 00:07:28.880
字典的基本格式

00:07:28.880 --> 00:07:31.985
就是成對的「鍵」和「值」

00:07:31.985 --> 00:07:35.360
因此我們有一個鍵"first"
和"Christopher"的值

00:07:35.360 --> 00:07:38.420
然後我們添加另一筆記錄

00:07:38.420 --> 00:07:41.345
一個名為"last"鍵和
"Harrison"的值

00:07:41.345 --> 00:07:44.720
我們可以"print"
出整個字典

00:07:44.720 --> 00:07:48.800
而如果我想
去抓單獨一個項目

00:07:48.800 --> 00:07:50.420
我也可以指定鍵名
來做到這一點

00:07:50.420 --> 00:07:54.775
而不用指定索引

00:07:54.775 --> 00:07:58.070
所以這次我輸出
的結果是

00:07:58.070 --> 00:08:01.265
它會先告訴我"{'first': 'Christopher',
'last': 'Harrison'}"

00:08:01.265 --> 00:08:05.585
然後你會發現當我們用
"person['first']"

00:08:05.585 --> 00:08:08.500
它會只輸出"克里斯多夫"

00:08:08.500 --> 00:08:10.640
你可能想知道

00:08:10.640 --> 00:08:14.765
什麼時候應該使用字典
何時又應該使用清單？

00:08:14.765 --> 00:08:16.490
不論是清單或字典

00:08:16.490 --> 00:08:19.480
你都可以放任何
你想放的東西進去

00:08:19.480 --> 00:08:22.969
而字典的
最大優勢是

00:08:22.969 --> 00:08:25.775
它有鍵跟值

00:08:25.775 --> 00:08:28.040
所以如果我希望
能在裡面找到

00:08:28.040 --> 00:08:31.790
一個特定的項目
但我不一定記得住它的索引值

00:08:31.790 --> 00:08:34.165
這種情況就
非常適合字典

00:08:34.165 --> 00:08:36.440
有時候
能給東西一個名字

00:08:36.440 --> 00:08:38.840
正是你需要的功能

00:08:38.840 --> 00:08:41.775
字典可以讓你用「鍵」找東西

00:08:41.775 --> 00:08:46.655
而如果我想用

00:08:46.655 --> 00:08:50.135
一個數字索引值
或者我想要

00:08:50.135 --> 00:08:53.560
依序存取所有項目

00:08:53.560 --> 00:08:56.375
這就是清單發揮作用的時候

00:08:56.375 --> 00:08:57.739
所以在一個清單中

00:08:57.739 --> 00:09:00.125
一切都以
數字做索引

00:09:00.125 --> 00:09:03.020
索引值保證了

00:09:03.020 --> 00:09:05.795
排列的順序

00:09:05.795 --> 00:09:09.505
我可以依據這個順序
把項目拉出來

00:09:09.505 --> 00:09:12.470
讓我們在下一單元

00:09:12.470 --> 00:09:16.850
繼續看幾個
清單和字典的範例

