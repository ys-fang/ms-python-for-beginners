WEBVTT

00:00:04.850 --> 00:00:08.365
>> 接下來讓我們在程式中

00:00:08.365 --> 00:00:10.015
嘗試解決一些
更複雜的情況

00:00:10.015 --> 00:00:12.205
我開啟VS Code

00:00:12.205 --> 00:00:14.260
我這裡有一個範例

00:00:14.260 --> 00:00:16.990
是關於進入
榮譽榜的標準

00:00:16.990 --> 00:00:20.440
只有總平均在85以上
而且最低分不低於70

00:00:20.440 --> 00:00:24.175
才能進入榮譽榜

00:00:24.175 --> 00:00:25.730
我剛注意到
我的註解寫錯了

00:00:25.730 --> 00:00:28.195
應該是不低於70

00:00:28.195 --> 00:00:32.200
所以我要做的是
要求使用者輸入平均成績

00:00:32.200 --> 00:00:34.765
你會發現我在這裡
已經做了一點手腳

00:00:34.765 --> 00:00:36.910
我所做的是當
使用者輸入總成績時

00:00:36.910 --> 00:00:40.150
由於"input"函數永遠
回傳字串資料型別

00:00:40.150 --> 00:00:41.980
所以我在這裡要

00:00:41.980 --> 00:00:43.660
把傳回值

00:00:43.660 --> 00:00:46.985
轉換為浮點數

00:00:46.985 --> 00:00:48.650
轉換成數字

00:00:48.650 --> 00:00:50.675
那之後就能將其與
其他數字進行比較

00:00:50.675 --> 00:00:52.760
這稱為嵌套函數

00:00:52.760 --> 00:00:54.020
偶爾在程式中
你可能會看到它

00:00:54.020 --> 00:00:55.895
並它非常有用

00:00:55.895 --> 00:00:57.540
但如果你發現它令你困惑

00:00:57.540 --> 00:01:00.890
你可以在另一行
再將總平均轉換為浮點數

00:01:00.890 --> 00:01:02.510
但你要知道
嵌套函數是被允許的

00:01:02.510 --> 00:01:04.580
它可以讓你在同一行
程式中完成這一切

00:01:04.580 --> 00:01:06.680
這裡有一個取捨

00:01:06.680 --> 00:01:10.370
看你想要更少的程式碼
還是要更容易看懂的程式碼

00:01:10.370 --> 00:01:13.840
我留給你自己判斷

00:01:13.840 --> 00:01:15.620
兩種寫法都可以

00:01:15.620 --> 00:01:17.390
我在這邊也寫一下
另一種寫法

00:01:17.390 --> 00:01:18.935
讓你可以決定你喜歡哪一種

00:01:18.935 --> 00:01:21.770
我可以用一行程式
先取得字串

00:01:21.770 --> 00:01:25.980
然後第二行再將
字串轉換為浮點數

00:01:26.120 --> 00:01:28.610
這兩個寫法都
完成同樣的事情

00:01:28.610 --> 00:01:31.550
因為"input"函數
返回一個字串

00:01:31.550 --> 00:01:32.720
在我能把它當作
數字來處理之前

00:01:32.720 --> 00:01:34.355
我必須要把它
轉換為數字型別

00:01:34.355 --> 00:01:36.860
所以這是轉換為數字的
兩種不同方式

00:01:36.860 --> 00:01:39.120
你選你喜歡的就好

00:01:39.120 --> 00:01:41.340
現在我們重新執行程式

00:01:41.340 --> 00:01:43.695
我們輸入

00:01:43.695 --> 00:01:48.180
"python using_and.py"

00:01:48.180 --> 00:01:49.470
根據我寫的程式碼

00:01:49.470 --> 00:01:52.330
我有一個巢狀"if"述句
一個"if"在另一個"if"裡面

00:01:52.330 --> 00:01:53.870
它問:

00:01:53.870 --> 00:01:55.730
"你的總平均是多少？"

00:01:55.730 --> 00:01:57.005
而且我的最低分

00:01:57.005 --> 00:01:59.390
超過70%
這樣我就進了榮譽榜

00:01:59.390 --> 00:02:01.130
所以它檢查了我的總平均

00:02:01.130 --> 00:02:03.160
我的總平均是否符合要求

00:02:03.160 --> 00:02:05.350
然後它檢查
我的最低分是多少

00:02:05.350 --> 00:02:06.785
如果我的最低分

00:02:06.785 --> 00:02:08.980
也滿足了要求
它就說我進了榮譽榜

00:02:08.980 --> 00:02:10.880
而在這個範例中

00:02:10.880 --> 00:02:13.255
這兩個條件都需要被滿足

00:02:13.255 --> 00:02:14.810
缺一不可

00:02:14.810 --> 00:02:16.880
總平均要超過

00:02:16.880 --> 00:02:18.335
85%的其他同學

00:02:18.335 --> 00:02:19.610
最低分的學科

00:02:19.610 --> 00:02:21.905
也不得低於70%的
其他同學

00:02:21.905 --> 00:02:26.275
這兩個條件都要成立

00:02:26.275 --> 00:02:28.160
邏輯上這兩個條件
沒有先後順序

00:02:28.160 --> 00:02:33.695
假設你總平均是 90%

00:02:33.695 --> 00:02:35.755
而最低分是 %86

00:02:35.755 --> 00:02:37.700
這樣我就進了榮譽榜

00:02:37.700 --> 00:02:39.950
我當然應該要嘗試
其他條件組合

00:02:39.950 --> 00:02:46.015
如果我的總平均是 80%
而最低分是 80%

00:02:46.015 --> 00:02:47.940
它就沒說我進了榮譽榜

00:02:47.940 --> 00:02:48.950
再說一次
我需要測試所有的組合

00:02:48.950 --> 00:02:52.160
來確認輸出是否
都如預期的那樣

00:02:52.160 --> 00:02:54.200
那麼使用"and"來
取代巢狀"if"

00:02:54.200 --> 00:02:57.280
在使用上有甚麼
優點跟缺點呢？

00:02:57.280 --> 00:03:00.440
有的，假設求出總平均

00:03:00.440 --> 00:03:02.870
需要很複雜的計算

00:03:02.870 --> 00:03:04.160
要花很多時間

00:03:04.160 --> 00:03:07.595
那麼先檢查最低分
可能是比較好的方法

00:03:07.595 --> 00:03:09.364
只有當最低分符合條件
才去檢查總平均

00:03:09.364 --> 00:03:11.590
如果他們的最低分
沒超過 70%

00:03:11.590 --> 00:03:13.910
那我就不用浪費時間

00:03:13.910 --> 00:03:16.475
去計算總平均

00:03:16.475 --> 00:03:18.455
在這種情況下
我可能會使用巢狀"if"

00:03:18.455 --> 00:03:19.970
但如果本來就有這些值

00:03:19.970 --> 00:03:21.785
只需要檢查他們

00:03:21.785 --> 00:03:25.170
那麼使用"and"能讓
程式看起來更容易理解

00:03:25.910 --> 00:03:29.145
另外，若考慮到執行效率

00:03:29.145 --> 00:03:30.940
使用布林變數
可以避免執行重複的計算

00:03:30.940 --> 00:03:33.385
並節省你的時間

00:03:33.385 --> 00:03:37.255
因此如果你有一個
非常複雜的"if"述句

00:03:37.255 --> 00:03:39.280
與其反覆複製和貼上
相同的程式碼片段

00:03:39.280 --> 00:03:41.580
到程式中的不同地方

00:03:41.580 --> 00:03:43.600
我們可以用一個
布林變數記住

00:03:43.600 --> 00:03:46.075
上次"if"條件判斷
計算後的結果

00:03:46.075 --> 00:03:48.400
我們看看這個
改寫過後的範例

00:03:48.400 --> 00:03:51.850
邏輯是一樣的

00:03:51.850 --> 00:03:56.155
要符合兩個條件
才說他能進榮譽榜

00:03:56.155 --> 00:03:58.810
而如果他們符合條件
我用一個布林變數

00:03:58.810 --> 00:04:01.435
記住條件判斷的結果
我把它設成 True

00:04:01.435 --> 00:04:05.590
再次提醒，這是布林值的 True
而不是帶引號的"True"

00:04:05.590 --> 00:04:07.180
如果前後有引號

00:04:07.180 --> 00:04:08.575
那就變成了
一個字串變數

00:04:08.575 --> 00:04:10.175
而這裡我們需要
布林變數

00:04:10.175 --> 00:04:12.960
所以True或False
的前後沒有引號

00:04:12.960 --> 00:04:15.545
它是區分大小寫的
T必須大寫

00:04:15.545 --> 00:04:17.225
這是一個常發生的
拼字錯誤

00:04:17.225 --> 00:04:18.800
你會注意到t若小寫
字就變成了黑色

00:04:18.800 --> 00:04:19.980
改大寫就又
變成藍色

00:04:19.980 --> 00:04:22.190
這就是像VS Code

00:04:22.190 --> 00:04:24.170
這樣的編程專用
編輯器好用的地方

00:04:24.170 --> 00:04:26.540
他們會自動幫你上不同顏色
給你一些提示

00:04:26.540 --> 00:04:29.510
所以我可以看到True
被識別出是關鍵字

00:04:29.510 --> 00:04:31.730
所以True為真

00:04:31.730 --> 00:04:33.245
前後沒有引號

00:04:33.245 --> 00:04:35.495
宣告一個布林變數

00:04:35.495 --> 00:04:38.555
奇妙的是
在之後的程式碼

00:04:38.555 --> 00:04:41.845
我可以只用
"if honour_roll:"

00:04:41.845 --> 00:04:44.080
來表示如果夠格進榮譽榜
就輸出"You made honour roll"

00:04:44.080 --> 00:04:48.430
所以，如果我執行這個程式

00:04:48.430 --> 00:04:57.755
"python boolean_variables.py"
我輸入 0.95

00:04:57.755 --> 00:05:00.515
假裝我的分數越來越好

00:05:00.515 --> 00:05:02.960
我的最低分是 0.82

00:05:02.960 --> 00:05:05.045
然後它說：我進了榮譽榜

00:05:05.045 --> 00:05:06.720
但這次你會注意到的

00:05:06.720 --> 00:05:09.130
我的"print"述句並
不在原來的"if"述句中

00:05:09.130 --> 00:05:12.170
而是發生在之後的
程式碼中

00:05:12.170 --> 00:05:14.690
所以任何時候你如果
發現自己在複製和貼上

00:05:14.690 --> 00:05:17.170
相同的"if"述句
到另一個地方

00:05:17.170 --> 00:05:19.490
你可以重新考慮並嘗試

00:05:19.490 --> 00:05:22.060
使用布林變數使
你的程式更易於閱讀

00:05:22.060 --> 00:05:24.560
但一定要做測試喔~

