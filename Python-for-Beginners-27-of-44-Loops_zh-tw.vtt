WEBVTT

00:00:04.910 --> 00:00:08.430
>> 接下來我們要介紹
Python迴圈的概念

00:00:08.430 --> 00:00:10.935
我最喜歡Python的一點

00:00:10.935 --> 00:00:14.130
就是他們拿掉了

00:00:14.130 --> 00:00:16.830
那些非必要的東西

00:00:16.830 --> 00:00:20.040
只保留了

00:00:20.040 --> 00:00:21.600
程式語言中一些

00:00:21.600 --> 00:00:24.375
絕對必要的東西

00:00:24.375 --> 00:00:27.960
我想沒有別的東西

00:00:27.960 --> 00:00:31.695
比Python迴圈的設計
更能證明這一點

00:00:31.695 --> 00:00:33.690
Python的迴圈

00:00:33.690 --> 00:00:36.945
只有兩種

00:00:36.945 --> 00:00:38.790
一種是"for"迴圈

00:00:38.790 --> 00:00:40.980
他就像其他程式語言中的

00:00:40.980 --> 00:00:42.135
forEach迴圈

00:00:42.135 --> 00:00:44.940
另一種就是"while"迴圈

00:00:44.940 --> 00:00:47.515
Python中沒有"until"的概念

00:00:47.515 --> 00:00:49.730
也沒有那種迴圈結束時

00:00:49.730 --> 00:00:53.345
做某件事的概念

00:00:53.345 --> 00:00:54.515
或類似的東西

00:00:54.515 --> 00:00:57.425
因為老實說
幾乎任何一種狀況

00:00:57.425 --> 00:00:59.990
你都可以用
這兩種迴圈寫出來

00:00:59.990 --> 00:01:02.600
而不需要其他語法

00:01:02.600 --> 00:01:05.250
我喜歡Python
的這種風格：

00:01:05.250 --> 00:01:07.385
"嘿，你需要的工具就是這些"

00:01:07.385 --> 00:01:09.020
"我們不需要其他
大同小異的工具"

00:01:09.020 --> 00:01:10.770
然後你還要
花時間去搞清楚

00:01:10.770 --> 00:01:13.130
什麼時候該用這個？
什麼時候該用那個？

00:01:13.130 --> 00:01:14.975
那種風格真的很棒

00:01:14.975 --> 00:01:20.780
好的，讓我們學
Python的迴圈

00:01:20.780 --> 00:01:22.925
"for"迴圈的

00:01:22.925 --> 00:01:25.430
語法是這樣的

00:01:25.430 --> 00:01:28.940
"for"之後接著一個變數

00:01:28.940 --> 00:01:32.405
然後是"in"
之後接著一個清單

00:01:32.405 --> 00:01:34.730
接下來的事會在
背景自動發生

00:01:34.730 --> 00:01:37.595
第一次執行時

00:01:37.595 --> 00:01:40.250
"name"變數將會被指派為
"Christopher"

00:01:40.250 --> 00:01:42.875
而第二次執行時

00:01:42.875 --> 00:01:46.235
"name"就變成了"Susan"

00:01:46.235 --> 00:01:50.180
它會幫我們自動
遍歷一次這份清單

00:01:50.180 --> 00:01:52.085
每輪到一個項目

00:01:52.085 --> 00:01:53.495
就把值暫時指派給"name"變數

00:01:53.495 --> 00:01:56.465
然後我就可以對"name"變數
做一些我想做的操作

00:01:56.465 --> 00:01:58.850
跟我們其他範例一樣

00:01:58.850 --> 00:02:00.815
我們只是把他
輸出到螢幕

00:02:00.815 --> 00:02:07.770
所以有我的名字
克里斯多夫和蘇珊

00:02:07.770 --> 00:02:12.100
如果你已經有清單
你要操作其中的項目，那這種方式沒問題

00:02:12.100 --> 00:02:14.020
但你可能在想
"嘿，等一下"

00:02:14.020 --> 00:02:17.285
然後我就是要用迴圈
重複做N次操作怎麼辦？

00:02:17.285 --> 00:02:20.240
沒問題

00:02:20.240 --> 00:02:23.585
你可用一個內建的小函數
"range()"

00:02:23.585 --> 00:02:26.240
"range()"做的事

00:02:26.240 --> 00:02:31.075
就是會自動產生
一組數字的清單

00:02:31.075 --> 00:02:33.660
這裡就在這裡

00:02:33.660 --> 00:02:35.520
讓我用不同顏色來標註

00:02:35.520 --> 00:02:37.380
零在這裡

00:02:37.380 --> 00:02:39.420
代表了起始的數字

00:02:39.420 --> 00:02:41.240
這裡的邏輯

00:02:41.240 --> 00:02:43.340
跟清單的索引

00:02:43.340 --> 00:02:45.455
是一樣的

00:02:45.455 --> 00:02:48.840
第一個參數是起始的整數數字

00:02:48.840 --> 00:02:51.950
然後第二個參數

00:02:51.950 --> 00:02:56.285
則是停止的整數數字

00:02:56.285 --> 00:02:58.669
所以執行後

00:02:58.669 --> 00:03:03.105
你會看到
它輸出 0 跟 1

00:03:03.105 --> 00:03:06.290
所以這個迴圈
跟之前使用清單的迴圈是一樣的

00:03:06.290 --> 00:03:08.795
它仍然是遍歷每個項目

00:03:08.795 --> 00:03:12.620
因為"range(0, 2)"

00:03:12.620 --> 00:03:15.050
事實上就是產生了

00:03:15.050 --> 00:03:20.115
一個"[0, 1]"的清單

00:03:20.115 --> 00:03:23.000
抱歉，這像四歲孩子畫的畫

00:03:23.000 --> 00:03:26.360
但畫得好不好不重要

00:03:26.360 --> 00:03:29.585
重要的是你知道了

00:03:29.585 --> 00:03:33.695
如果你想要一個
執行特定次數的迴圈

00:03:33.695 --> 00:03:36.655
你可以使用"range()"

00:03:36.655 --> 00:03:41.945
好的，最後一個介紹的迴圈
是"while"迴圈

00:03:41.945 --> 00:03:47.450
"while"迴圈會指定
一個條件判斷式

00:03:47.450 --> 00:03:50.280
只要判斷的結果為真

00:03:50.280 --> 00:03:54.155
在我的例子中是：
"index < len(names)"

00:03:54.155 --> 00:03:58.300
程式就會在
這個迴圈中反覆執行

00:03:58.300 --> 00:03:59.910
所以"while"迴圈的關鍵

00:03:59.910 --> 00:04:03.755
就是你要去改變這個條件

00:04:03.755 --> 00:04:09.500
在某個時候
判斷結果要變為 False

00:04:09.500 --> 00:04:12.799
否則你就會
永遠被困在那裡

00:04:12.799 --> 00:04:15.350
而最終得到
堆疊溢位的錯誤

00:04:15.350 --> 00:04:19.085
所以你需要確保
條件在迴圈中會更改

00:04:19.085 --> 00:04:21.650
在這個範例中
我在迴圈中的最後一行

00:04:21.650 --> 00:04:25.805
把"index"加一

00:04:25.805 --> 00:04:30.110
這個例子大概是

00:04:30.110 --> 00:04:32.555
人們在介紹迴圈時

00:04:32.555 --> 00:04:35.300
最常用的例子

00:04:35.300 --> 00:04:37.745
但我必須跟你說實話

00:04:37.745 --> 00:04:42.680
這不是一個"while"迴圈
的典型的例子

00:04:42.680 --> 00:04:45.560
通常使用
"while"迴圈的狀況是

00:04:45.560 --> 00:04:49.160
有些東西會自動改變

00:04:49.160 --> 00:04:51.950
例如我可能是
從一個檔案中

00:04:51.950 --> 00:04:55.180
讀取文字

00:04:55.180 --> 00:04:57.080
這就是適合使用
"while"迴圈的狀況

00:04:57.080 --> 00:04:59.659
但在這個範例中
我拿到了一個清單

00:04:59.659 --> 00:05:04.655
若比較上一個範例
可以看出在這裡，"for"迴圈會更好用

00:05:04.655 --> 00:05:06.170
如果我可能想遍歷

00:05:06.170 --> 00:05:08.220
每個項目或類似的東西

00:05:08.220 --> 00:05:10.360
也許用"while"迴圈也能做到

00:05:10.360 --> 00:05:12.030
又或者我在清單中找東西

00:05:12.030 --> 00:05:13.680
也許用"while"迴圈也能做到

00:05:13.680 --> 00:05:16.835
但最常見的寫法

00:05:16.835 --> 00:05:21.580
就是用"for"迴圈

00:05:21.580 --> 00:05:24.770
無論如何，讓我們下一單元

00:05:24.770 --> 00:05:28.830
繼續探討一些
"for"迴圈和"while"迴圈例子

