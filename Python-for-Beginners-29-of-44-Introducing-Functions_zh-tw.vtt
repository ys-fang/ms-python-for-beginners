WEBVTT

00:00:03.410 --> 00:00:06.150
>> 我們已經學了不少

00:00:06.150 --> 00:00:08.430
Python的語法跟特性

00:00:08.430 --> 00:00:10.770
這一集我們來介紹一個
讓你寫程式更有效率的方法

00:00:10.770 --> 00:00:14.040
就是「函數」(function)

00:00:14.040 --> 00:00:15.825
老實說大多數的

00:00:15.825 --> 00:00:18.000
軟體工程師

00:00:18.000 --> 00:00:19.320
都是很懶的

00:00:19.320 --> 00:00:21.320
我就非常懶

00:00:21.320 --> 00:00:24.035
所以我寫程式時常用
"複製和貼上"

00:00:24.035 --> 00:00:25.490
你會經常發現

00:00:25.490 --> 00:00:28.660
自己老是在複製和貼上程式碼
從一個地方到另一個地方

00:00:28.660 --> 00:00:31.790
在這個範例中
我有一個相當簡單的程式

00:00:31.790 --> 00:00:33.800
我想了解為何

00:00:33.800 --> 00:00:35.990
我的程式總是
花這麼長時間來執行

00:00:35.990 --> 00:00:39.210
所以我寫了一些
"print()"述句

00:00:39.210 --> 00:00:41.690
他們記錄了這行程式碼
執行時的時間

00:00:41.690 --> 00:00:45.320
這樣我就能看到
在程式不同階段的時間

00:00:45.320 --> 00:00:47.135
所以我剛剛複製和
貼上了幾行程式碼

00:00:47.135 --> 00:00:50.240
只是輸出了
目前日期和時間

00:00:50.240 --> 00:00:54.020
這樣我就能看到

00:00:54.020 --> 00:00:56.875
我的這個"for"迴圈
花了多少時間執行

00:00:56.875 --> 00:01:00.220
這是一個試驗和除錯時
有用的小技巧

00:01:00.220 --> 00:01:02.060
可以找出哪段程式碼
花了太多時間執行

00:01:02.060 --> 00:01:03.885
只看這裡的話

00:01:03.885 --> 00:01:05.130
這樣沒花多少功夫

00:01:05.130 --> 00:01:06.910
我只是複製並
貼上一段程式碼

00:01:06.910 --> 00:01:09.640
但一旦你發現你自己
在程式中的更多地方

00:01:09.640 --> 00:01:13.510
重複複製和貼上
完全相同的程式碼

00:01:13.510 --> 00:01:15.980
你應該停下來問問自己

00:01:15.980 --> 00:01:18.435
我是不是應該把它

00:01:18.435 --> 00:01:21.340
寫成一個函數？

00:01:21.340 --> 00:01:23.815
如果你會一遍又一遍的
執行相同的程式碼

00:01:23.815 --> 00:01:25.330
你應該把它放到一個函數中

00:01:25.330 --> 00:01:27.535
然後每次你
需要運行該段程式碼

00:01:27.535 --> 00:01:30.080
你可以簡單地呼叫該函數

00:01:30.080 --> 00:01:31.925
所以我在這裡

00:01:31.925 --> 00:01:33.885
創建了一個函數
稱為"print_time()"

00:01:33.885 --> 00:01:35.590
我定義了一個函數

00:01:35.590 --> 00:01:37.600
使用"def"述句

00:01:37.600 --> 00:01:40.410
定義一個函數名為
"print_time()"

00:01:40.410 --> 00:01:43.935
在名字之後是一對圓括弧
然後是冒號

00:01:43.935 --> 00:01:46.020
這就是宣告函數的語法

00:01:46.020 --> 00:01:47.960
然後編寫每次呼叫此函數時

00:01:47.960 --> 00:01:50.855
呼叫"print_time()"時
要執行的程式碼

00:01:50.855 --> 00:01:52.880
要注意這裡要縮排

00:01:52.880 --> 00:01:55.205
縮排就是留四個空格

00:01:55.205 --> 00:01:57.440
就像"if"述句和迴圈一樣

00:01:57.440 --> 00:02:01.130
縮排決定了那幾行程式碼
屬於該函數

00:02:01.130 --> 00:02:06.815
然後回到我的程式
當我想執行這幾行程式碼

00:02:06.815 --> 00:02:09.010
我只需呼叫"print_time()"函數

00:02:09.010 --> 00:02:11.540
在執行上

00:02:11.540 --> 00:02:13.760
邏輯是完全相同的

00:02:13.760 --> 00:02:15.725
那麼使用函數
有甚麼優點呢？

00:02:15.725 --> 00:02:18.635
如果執行的結果
是相同的

00:02:18.635 --> 00:02:21.580
改寫成函數有甚麼好處？

00:02:21.580 --> 00:02:24.555
明顯的優點有兩個

00:02:24.555 --> 00:02:26.540
其一，它使程式更具可讀性

00:02:26.540 --> 00:02:28.100
當你使用函數

00:02:28.100 --> 00:02:30.335
你的程式看起來會是
"我呼叫print_time()"

00:02:30.335 --> 00:02:33.785
這樣寫更清楚明瞭
這裡在做甚麼

00:02:33.785 --> 00:02:36.000
在這裡，我呼叫"print_time"
在這裡，我呼叫"print_time"

00:02:36.000 --> 00:02:37.970
所以如果給函數取個好名字

00:02:37.970 --> 00:02:39.875
它就能讓程式碼
更具可讀性

00:02:39.875 --> 00:02:43.170
但真正最大的優點就是

00:02:43.170 --> 00:02:44.630
也許哪一天
關於這段程式

00:02:44.630 --> 00:02:46.430
你想到一個更好的寫法

00:02:46.430 --> 00:02:49.520
例如在這裡
我用了"datetime"

00:02:49.520 --> 00:02:51.910
因為我想輸出
當前日期和時間

00:02:51.910 --> 00:02:56.030
回想一下之前我們學到的
"datetime"模組

00:02:56.030 --> 00:02:57.920
當我呼叫"datetime"時

00:02:57.920 --> 00:03:00.440
我現在必須寫
"datetime.datetime.now()"

00:03:00.440 --> 00:03:02.915
因為我是在說
從"datetime"函式庫中

00:03:02.915 --> 00:03:04.340
呼叫"datetime"模組

00:03:04.340 --> 00:03:08.195
中的"now"函數
這實在有點囉嗦

00:03:08.195 --> 00:03:10.820
而事實使用"datetime"

00:03:10.820 --> 00:03:11.990
還有別的寫法

00:03:11.990 --> 00:03:13.250
我們會在之後的

00:03:13.250 --> 00:03:15.650
課程詳細討論
函式庫和模組

00:03:15.650 --> 00:03:19.840
在這裡我們可以改寫成
"from datetime import datetime"

00:03:19.840 --> 00:03:21.555
我們之後會解釋這是甚麼意思

00:03:21.555 --> 00:03:24.225
這樣改寫的話，在之後的程式就可以只寫
"print(datetime.now())"

00:03:24.225 --> 00:03:26.900
我們又學會了更多Python的技巧

00:03:26.900 --> 00:03:29.720
我知道了一個更乾淨的方式
來呼叫"now()"函數

00:03:29.720 --> 00:03:32.855
而現在我只需要
在更改一個地方

00:03:32.855 --> 00:03:34.300
就在函數內部

00:03:34.300 --> 00:03:35.840
但如果你不創建函數

00:03:35.840 --> 00:03:37.745
而是到處複製
和貼上程式碼

00:03:37.745 --> 00:03:39.005
一但你發現一個錯誤

00:03:39.005 --> 00:03:41.570
就需要修改所有
那些重複的程式碼

00:03:41.570 --> 00:03:44.275
而我們往往會漏改某些地方

00:03:44.275 --> 00:03:47.435
若改寫為一個函數

00:03:47.435 --> 00:03:48.785
如果我需要
修改一些東西

00:03:48.785 --> 00:03:51.245
我只需要修改
一個地方

00:03:51.245 --> 00:03:54.785
這是改寫成函數的
一個巨大好處

00:03:54.785 --> 00:03:57.650
有時候我們複製和
貼上程式碼後

00:03:57.650 --> 00:04:00.455
需要做一些修改

00:04:00.455 --> 00:04:01.880
在這個範例中

00:04:01.880 --> 00:04:04.505
我想每次顯示不同的訊息

00:04:04.505 --> 00:04:05.960
程式邏輯是一樣的

00:04:05.960 --> 00:04:07.610
我只是想在

00:04:07.610 --> 00:04:10.460
在輸出時間之前
先輸出一個訊息

00:04:10.460 --> 00:04:12.320
但我想更明確的訊息

00:04:12.320 --> 00:04:14.065
來顯示當時的狀態

00:04:14.065 --> 00:04:16.260
這樣我還能用函數嗎？

00:04:16.260 --> 00:04:20.175
當然可以
因為使用函數時

00:04:20.175 --> 00:04:22.110
可以傳遞參數進去

00:04:22.110 --> 00:04:24.780
當你呼叫
"print_time()"函數

00:04:24.780 --> 00:04:26.215
只需傳遞一個
"task_name"變數進去

00:04:26.215 --> 00:04:28.280
我剛幫這個參數
起了一個名字

00:04:28.280 --> 00:04:30.110
你可以選擇
你自己的參數名稱

00:04:30.110 --> 00:04:31.130
但盡量是有意義的名稱

00:04:31.130 --> 00:04:35.105
最好是讓別人看名稱就能
猜出這個變數是做甚麼用的

00:04:35.105 --> 00:04:36.515
然後要寫註解

00:04:36.515 --> 00:04:39.230
確保你有註解來
解釋函數的作用

00:04:39.230 --> 00:04:41.130
幫助你自己或
其他程式設計師

00:04:41.130 --> 00:04:44.535
在日後更容易能
理解你的程式碼

00:04:44.535 --> 00:04:47.255
而如果你有一個
帶有參數的函數

00:04:47.255 --> 00:04:48.545
當你呼叫它時

00:04:48.545 --> 00:04:51.200
你必須傳遞
一個值作為參數

00:04:51.200 --> 00:04:53.910
所以你可以看到這裡
當我呼叫"print_time()"時

00:04:53.910 --> 00:04:56.420
我傳遞了字串
"first name assigned"

00:04:56.420 --> 00:04:58.505
所以當這個函數執行時

00:04:58.505 --> 00:04:59.885
"task_name"變數

00:04:59.885 --> 00:05:02.245
就會被指派為字串
"first name assigned"

00:05:02.245 --> 00:05:05.810
這樣當每次
我呼叫這個函數時

00:05:05.810 --> 00:05:08.090
就能傳遞我想要的訊息

00:05:08.090 --> 00:05:10.415
當你在創建函數時

00:05:10.415 --> 00:05:14.010
參數能讓你有
更大的靈活性

00:05:14.080 --> 00:05:19.070
下面是另一個範例

00:05:19.070 --> 00:05:20.675
這兩行程式碼看起來略有不同

00:05:20.675 --> 00:05:22.220
但實際上是同樣的邏輯

00:05:22.220 --> 00:05:24.110
也許複製和貼上也行得通

00:05:24.110 --> 00:05:27.215
但我想讓程式看起來
更簡潔、更有效率

00:05:27.215 --> 00:05:30.110
我想要找出某人
名字的縮寫

00:05:30.110 --> 00:05:32.870
假設我在一家公司工作

00:05:32.870 --> 00:05:36.230
我們要幫網站的註冊使用者

00:05:36.230 --> 00:05:37.820
產生帳號或電子郵件帳號

00:05:37.820 --> 00:05:39.440
我們用每個人名字的
首字母縮寫來產生

00:05:39.440 --> 00:05:43.545
使用者帳號或
電子郵件帳號

00:05:43.545 --> 00:05:47.250
所以我做的是

00:05:47.250 --> 00:05:49.470
我要透過使用者輸入
得到了他們的名字

00:05:49.470 --> 00:05:51.360
所以我要求他們
輸入他們的名

00:05:51.360 --> 00:05:53.880
如果你還記得
我們之前學到的清單

00:05:53.880 --> 00:05:55.910
我們學會了如何
提取清單中的值

00:05:55.910 --> 00:05:58.295
而字串型別其實
就是一種清單

00:05:58.295 --> 00:05:59.720
我從索引0開始
停在索引1

00:05:59.720 --> 00:06:01.045
取一個字元

00:06:01.045 --> 00:06:04.235
所以得到他們名字的
第一個字元

00:06:04.235 --> 00:06:07.850
我儲存在一個變數
稱為"first_name_initial"

00:06:07.850 --> 00:06:10.310
然後我要求使用者
輸入他們的姓氏

00:06:10.310 --> 00:06:12.450
然後我取得了姓氏

00:06:12.450 --> 00:06:14.730
一樣從索引0抓起

00:06:14.730 --> 00:06:15.980
停在索引1

00:06:15.980 --> 00:06:18.920
也就是只抓第一個字母

00:06:18.920 --> 00:06:21.500
指派給變數名稱
"last_name_initial"

00:06:21.500 --> 00:06:23.120
在這個範例中

00:06:23.120 --> 00:06:25.310
我把這兩個變數
輸出到螢幕

00:06:25.310 --> 00:06:26.750
但我也可以用它們來生成

00:06:26.750 --> 00:06:29.555
某人的電子郵件帳號或
使用者帳號

00:06:29.555 --> 00:06:33.840
標註的這兩行程式碼
看起來不太一樣

00:06:33.840 --> 00:06:35.915
但是邏輯上

00:06:35.915 --> 00:06:38.525
是在完成

00:06:38.525 --> 00:06:40.385
一樣的任務

00:06:40.385 --> 00:06:41.480
都是要從一個字串

00:06:41.480 --> 00:06:43.880
擷取第一個字元

00:06:43.880 --> 00:06:46.080
我一樣可以把這段程式碼
搬到一個函數中

00:06:46.080 --> 00:06:48.275
但它語法會稍微不同

00:06:48.275 --> 00:06:51.305
我現在需要一個
能接受參數的函數

00:06:51.305 --> 00:06:53.810
所以我定義一個函數
稱為"get_initial()"

00:06:53.810 --> 00:06:55.430
它接受參數"name"

00:06:55.430 --> 00:06:56.450
所以你要傳遞
一個名字當參數

00:06:56.450 --> 00:06:59.630
我會還給你
這個名字的第一個字母

00:06:59.630 --> 00:07:01.865
所以我取得名字

00:07:01.865 --> 00:07:03.845
從中提取第一個字母

00:07:03.845 --> 00:07:05.735
將其放入名為
"initial"的變數中

00:07:05.735 --> 00:07:07.820
但我還必須要在函數中

00:07:07.820 --> 00:07:09.745
添加一個"return"述句

00:07:09.745 --> 00:07:12.890
這樣這個函數就會
返回一個值

00:07:12.890 --> 00:07:15.245
現在我們要
改變呼叫它的方式

00:07:15.245 --> 00:07:18.095
因為因為函數
將返回一個值

00:07:18.095 --> 00:07:19.850
這意味著當你
呼叫函數時

00:07:19.850 --> 00:07:22.430
你必須有一個地方
儲存返回的值

00:07:22.430 --> 00:07:25.070
所以你看到

00:07:25.070 --> 00:07:29.555
當我呼叫"get_initial"
然後我用"first_name"當參數

00:07:29.555 --> 00:07:31.525
我把傳回的值

00:07:31.525 --> 00:07:34.290
存儲在變數
"first_name_initial"中

00:07:34.290 --> 00:07:35.775
一樣的當我在這裡

00:07:35.775 --> 00:07:37.680
呼叫"get_initial"函數

00:07:37.680 --> 00:07:39.225
我把姓氏當參數

00:07:39.225 --> 00:07:41.400
當值被傳回時

00:07:41.400 --> 00:07:43.860
它將被存儲在變數
"last_name_initial"中

00:07:43.860 --> 00:07:46.255
所以同樣的程式設計邏輯

00:07:46.255 --> 00:07:47.690
但這次使用了函數

00:07:47.690 --> 00:07:50.810
這樣就稍微提升了
程式的效率

00:07:50.810 --> 00:07:54.170
而我仍然擁有
那最棒的優點

00:07:54.170 --> 00:07:57.080
如果以後我想改變
部分的程式碼

00:07:57.080 --> 00:08:00.420
例如："嘿，等一下，
首字母縮寫傳回小寫字元"

00:08:00.420 --> 00:08:04.040
如果我想要強迫讓
縮寫都變成大寫呢？

00:08:04.040 --> 00:08:07.520
我需要做的就只是改變
函數中的一行程式碼

00:08:07.520 --> 00:08:09.050
然後他就能
套用到任何地方

00:08:09.050 --> 00:08:11.570
這是使用函數
最大的優點之一

00:08:11.570 --> 00:08:14.895
更好的可讀性和

00:08:14.895 --> 00:08:17.460
如果你需要修改
你只需要改變一個地方

00:08:17.890 --> 00:08:20.940
函數還可以讓
程式變得更整潔

00:08:20.940 --> 00:08:23.815
你有時會看到工程師
非常聰明的使用函數

00:08:23.815 --> 00:08:25.900
因為函數會傳回值

00:08:25.900 --> 00:08:27.790
所以你可以用
不同的方式來呼叫他們

00:08:27.790 --> 00:08:30.190
你可以呼叫它們
並取得傳回值

00:08:30.190 --> 00:08:33.190
然後儲存在一個變數中

00:08:33.190 --> 00:08:36.925
或者你也可以直接
在述句中呼叫它們

00:08:36.925 --> 00:08:38.200
所以在這個範例中

00:08:38.200 --> 00:08:40.030
我已經把程式碼搬到函數中

00:08:40.030 --> 00:08:43.190
而我有一個
使用者輸入的名字

00:08:43.190 --> 00:08:45.405
和由使用者輸入的姓氏

00:08:45.405 --> 00:08:47.760
然後我先輸出

00:08:47.760 --> 00:08:50.025
"print("Your initial are:)"
然後串接字串

00:08:50.025 --> 00:08:53.655
呼叫"get_initial(first_name)"
返回第一個字母

00:08:53.655 --> 00:08:55.320
然後繼續串接

00:08:55.320 --> 00:08:56.790
呼叫"get_initial(last_name)"

00:08:56.790 --> 00:08:59.445
把第一個字元回傳回來
最後輸出到螢幕

00:08:59.445 --> 00:09:02.160
有些人看這種寫法，會說：
"這很酷。我喜歡"

00:09:02.160 --> 00:09:04.470
這種寫法確實很有效率

00:09:04.470 --> 00:09:06.955
只用一行程式碼
不需要額外宣告變數

00:09:06.955 --> 00:09:09.845
但是，其他人看這種寫法
可能反而會看不懂

00:09:09.845 --> 00:09:11.670
所以這又是一個要取捨的選擇

00:09:11.670 --> 00:09:13.920
但你可以選擇你喜歡的風格

00:09:13.920 --> 00:09:16.750
使用嵌套函數讓程式更短

00:09:16.750 --> 00:09:18.700
或者你是否更喜歡

00:09:18.700 --> 00:09:22.120
使用變數讓程式更容易看懂

00:09:22.120 --> 00:09:23.920
當你查看網上的
部落格文章和教學

00:09:23.920 --> 00:09:25.840
會發現這兩種風格
都有人喜歡

00:09:25.840 --> 00:09:29.060
所以你只要知道
有兩個選項

00:09:29.060 --> 00:09:32.150
當你寫程式時你可以
自己決定要用哪一種

00:09:32.450 --> 00:09:34.810
總之，函數可以讓

00:09:34.810 --> 00:09:37.920
你的程式更易於維護

00:09:37.920 --> 00:09:42.115
如果函數名稱和參數名稱取得好
可讀性也會增加

00:09:42.115 --> 00:09:46.250
然後記得要寫註解
來解釋函數的目的

00:09:46.250 --> 00:09:47.885
最好每宣告一個函數

00:09:47.885 --> 00:09:49.630
都附加一行註解說：

00:09:49.630 --> 00:09:51.495
"這是一個函數，
這就是它所做的"

00:09:51.495 --> 00:09:52.645
如果函數有參數

00:09:52.645 --> 00:09:55.205
也要添加註解
來解釋每個參數的用法

00:09:55.205 --> 00:09:56.660
當你過了好幾個月
想再回來修改你的程式

00:09:56.660 --> 00:09:58.370
有寫註解可以讓你的人生
從黑白變彩色

00:09:58.370 --> 00:10:01.700
然後記得在呼叫你的函數之前

00:10:01.700 --> 00:10:05.180
要先宣告你的函數

00:10:05.180 --> 00:10:09.180
好吧，我們會在下一單元
開啟VS Code來實際演練

