WEBVTT

00:00:03.050 --> 00:00:05.430
>> 好我們學了字串型別

00:00:05.430 --> 00:00:06.945
也學了數字型別

00:00:06.945 --> 00:00:09.420
我想我們已經準備好
來學"日期"型別

00:00:09.420 --> 00:00:11.670
我嘆了一口氣
是因為日期型別

00:00:11.670 --> 00:00:13.975
會比之前的型別
來得複雜

00:00:13.975 --> 00:00:15.810
在任何程式設計語言中

00:00:15.810 --> 00:00:18.315
日期型別在使用上
難度也比較高

00:00:18.315 --> 00:00:21.300
我們在使用日期時
最常見的用法就是

00:00:21.300 --> 00:00:23.670
取得當前日期和時間

00:00:23.670 --> 00:00:25.770
當我們要記錄錯誤或
將資料寫進資料庫時

00:00:25.770 --> 00:00:28.080
很常用到日期型別

00:00:28.080 --> 00:00:29.820
我們想知道資料
是什麼時候被存檔的

00:00:29.820 --> 00:00:32.490
或者該記錄
是何時被寫入的

00:00:32.490 --> 00:00:34.370
而要獲知當前日期和時間

00:00:34.370 --> 00:00:37.330
要使用"datetime"函式庫

00:00:37.330 --> 00:00:39.790
我們還沒有介紹到函式庫

00:00:39.790 --> 00:00:42.105
但很快我們就會教到了

00:00:42.105 --> 00:00:44.295
所以現在先不要驚慌

00:00:44.295 --> 00:00:47.170
只要知道我要使用某個函數
而它被放在某個函式庫的某個模組中

00:00:47.170 --> 00:00:49.180
這是一種Python的風格

00:00:49.180 --> 00:00:51.050
有很多函式庫可以
用來做很多很酷的事情

00:00:51.050 --> 00:00:54.245
可以幫助我們節省很多時間
是我們的好朋友

00:00:54.245 --> 00:00:56.570
我現在要使用
"datetime"函式庫

00:00:56.570 --> 00:00:58.700
其中的一個同樣
名為"datetime"的模組

00:00:58.700 --> 00:01:01.955
用其中的某個函數
來取得目前的日期和時間

00:01:01.955 --> 00:01:04.805
我們來看看該怎麼寫

00:01:04.805 --> 00:01:07.895
"from datetime import datetime"

00:01:07.895 --> 00:01:09.320
這基本上是說

00:01:09.320 --> 00:01:11.675
從"datetime"函式庫中
取得"datetime"模組

00:01:11.675 --> 00:01:14.300
加了這一行後

00:01:14.300 --> 00:01:17.135
我就可以開始使用
"datetime"模組

00:01:17.135 --> 00:01:19.585
然後它的某個函數
會回傳目前的日期和時間

00:01:19.585 --> 00:01:20.960
注意
我有好好的寫註解

00:01:20.960 --> 00:01:22.910
註解我這行程式碼在做甚麼

00:01:22.910 --> 00:01:24.515
這樣以後我才能記得
我現在在想甚麼

00:01:24.515 --> 00:01:27.425
"now()"函數會返回
一個"datetime"物件

00:01:27.425 --> 00:01:28.730
所以我要
"print('Today is: ' + ...)"

00:01:28.730 --> 00:01:32.105
但我們已經學過
資料型別轉換

00:01:32.105 --> 00:01:34.295
如果我直接把字串加上"datetime"型別
會發生甚麼事？

00:01:34.295 --> 00:01:35.630
一個是字串
一個是"datetime"

00:01:35.630 --> 00:01:37.595
它會很困惑
不知道該怎麼做

00:01:37.595 --> 00:01:39.710
所以我們需要先
轉換"datetime"型別為字串型別

00:01:39.710 --> 00:01:42.350
就像我們之前
轉換數字變成字串

00:01:42.350 --> 00:01:44.630
以讓我們可以在螢幕上輸出

00:01:44.630 --> 00:01:46.640
所以我現在可以
使用datetime.now()

00:01:46.640 --> 00:01:49.195
來取得目前的日期和時間

00:01:49.195 --> 00:01:53.330
如果我轉換"datetime"型別
為字串資料型別

00:01:53.330 --> 00:01:56.700
我就可以串接兩者
並輸出到螢幕

00:01:57.250 --> 00:02:00.050
一旦你匯入"datetime"模組

00:02:00.050 --> 00:02:02.090
裡面有一大堆函數可用

00:02:02.090 --> 00:02:04.610
這就是"匯入"功能美妙的地方

00:02:04.610 --> 00:02:07.835
所以現在
我取得了一個"datetime"物件

00:02:07.835 --> 00:02:10.250
我把它儲存在一個變數中

00:02:10.250 --> 00:02:12.170
然後我可以顯示今天的日期

00:02:12.170 --> 00:02:14.015
這行跟之前一樣

00:02:14.015 --> 00:02:15.770
但你可能注意到上面這行

00:02:15.770 --> 00:02:19.025
我匯入了另一個我將用到的函數
名為"timedelta"

00:02:19.025 --> 00:02:20.330
它位於同一個函式庫中

00:02:20.330 --> 00:02:23.045
也在"datetime"函式庫中
它很酷

00:02:23.045 --> 00:02:24.635
因為它讓我能計算出

00:02:24.635 --> 00:02:26.000
從今天到某一個日期中間
差了幾天

00:02:26.000 --> 00:02:27.800
或幾個星期

00:02:27.800 --> 00:02:30.510
所以我可以
定義一天的"時差"

00:02:30.510 --> 00:02:33.305
時間上差了一天就是
"timedelta(days=1)"


00:02:33.305 --> 00:02:36.195
如果我想要差個三天，就會是
"timedelta(days=3)"

00:02:36.195 --> 00:02:38.090
如果我想差個一周
我可以寫

00:02:38.090 --> 00:02:39.875
"timedelta(weeks=1)"

00:02:39.875 --> 00:02:44.540
所以昨天可以寫成
"today - one_day"

00:02:44.540 --> 00:02:47.750
想想這其實有可能很複雜

00:02:47.750 --> 00:02:51.060
因為如果今天是3月1日

00:02:51.060 --> 00:02:52.800
今天減去一天

00:02:52.800 --> 00:02:54.540
那是2月28日

00:02:54.540 --> 00:02:56.150
如果今年是閏年的話

00:02:56.150 --> 00:02:57.710
就會是2月29日

00:02:57.710 --> 00:02:58.970
我不想在程式中寫

00:02:58.970 --> 00:03:01.235
這些複雜的邏輯

00:03:01.235 --> 00:03:02.810
所以對我來說
使用"timedelta"函數

00:03:02.810 --> 00:03:07.190
讓工作變得簡單許多

00:03:07.190 --> 00:03:10.525
就讓Python很神奇的幫我自動判斷
前一天是幾月幾號

00:03:10.525 --> 00:03:13.115
然後，我可以輸出在螢幕上

00:03:13.115 --> 00:03:15.890
所以在我錄這個課程時

00:03:15.890 --> 00:03:17.600
是六月六日

00:03:17.600 --> 00:03:19.700
然後昨天是六月五日

00:03:19.700 --> 00:03:24.150
因此
"timedelta"函數的功能太棒了

00:03:24.150 --> 00:03:26.015
能為你節省大量寫程式的時間

00:03:26.015 --> 00:03:28.445
總之如果你需要
處理日期跟時間

00:03:28.445 --> 00:03:29.660
需要某種處理日期跟時間的功能

00:03:29.660 --> 00:03:31.550
很可能在"datetime"或
其他函式庫裡

00:03:31.550 --> 00:03:34.040
已經有適合的函數
能提供這個功能

00:03:34.040 --> 00:03:36.350
如果你發現自己需要
計算上周一是幾月幾號

00:03:36.350 --> 00:03:39.020
某一天是一年的第幾天等等

00:03:39.020 --> 00:03:40.700
很可能已經有一個寫好的函數
在某個程式庫中等你

00:03:40.700 --> 00:03:43.560
用這些內建的函數可以節省你大量的時間
(譯註：不用重新發明輪子！拿別人的來用就好)

00:03:43.670 --> 00:03:47.315
現在，如果我要輸出日期到螢幕上

00:03:47.315 --> 00:03:50.120
預設情況下
它會顯示很長的日期資訊

00:03:50.120 --> 00:03:53.615
包括：日期、時間、小時、
分鐘、秒、毫秒

00:03:53.615 --> 00:03:55.400
如果想要不同的格式

00:03:55.400 --> 00:03:58.085
或想只取其中一部份的內容

00:03:58.085 --> 00:04:02.120
所以我可以寫
"current_date.day"

00:04:02.120 --> 00:04:03.890
因為我們已經取得了

00:04:03.890 --> 00:04:06.020
目前的日期和時間
並儲存在

00:04:06.020 --> 00:04:08.240
名為"current_date"的變數中

00:04:08.240 --> 00:04:09.635
所以我可以從中只取
"幾號"

00:04:09.635 --> 00:04:11.245
也可以只取
"月份"

00:04:11.245 --> 00:04:12.690
也可以只取
"西元幾年"

00:04:12.690 --> 00:04:15.525
也可以只取
"幾點"、"幾分"、"幾秒"

00:04:15.525 --> 00:04:20.000
這樣一來
當我要儲存、使用或顯示資料時

00:04:20.000 --> 00:04:22.070
我可以決定要處理那些資料

00:04:22.070 --> 00:04:25.230
只處理那些對我重要的部分

00:04:27.380 --> 00:04:31.300
有時候你無法直接
取得"datetime"物件

00:04:31.300 --> 00:04:33.610
又或者你需要把資料
儲存為"datetime"資料型別

00:04:33.610 --> 00:04:35.855
我一時想不到甚麼好的例子

00:04:35.855 --> 00:04:39.250
但回想一下

00:04:39.250 --> 00:04:40.570
我們之前寫過的

00:04:40.570 --> 00:04:42.805
以"input"函數取得值

00:04:42.805 --> 00:04:44.815
這些值永遠被儲存為字串

00:04:44.815 --> 00:04:46.965
所以如果我問：
嘿~你的生日是哪一天？

00:04:46.965 --> 00:04:51.530
我說我的生日是1999年6月5日

00:04:51.530 --> 00:04:53.795
好的
讓我一起來看程式要怎麼寫

00:04:53.795 --> 00:04:57.790
從"input"取得值後
儲存在變數中

00:04:57.790 --> 00:04:58.810
因為現在它是字串

00:04:58.810 --> 00:05:00.835
要將其轉換為日期型別

00:05:00.835 --> 00:05:03.250
但更為複雜的

00:05:03.250 --> 00:05:04.840
就是當你取得一個字串

00:05:04.840 --> 00:05:06.235
你要轉換為日期

00:05:06.235 --> 00:05:09.715
你必須知它的格式是日月年？

00:05:09.715 --> 00:05:12.195
還是月日年？

00:05:12.195 --> 00:05:15.410
年分是兩位數還是四位數？

00:05:15.410 --> 00:05:17.225
日與月之間是用斜線
還是連字號分開？

00:05:17.225 --> 00:05:20.770
或者只是空格

00:05:20.770 --> 00:05:25.290
這是處理日期型別有趣的地方

00:05:25.290 --> 00:05:27.935
也是很有挑戰性的地方

00:05:27.935 --> 00:05:30.725
所以如果我在這裡
執行這個程式

00:05:30.725 --> 00:05:34.895
你會看到我用了
"strptime()"函數

00:05:34.895 --> 00:05:37.190
這基本上會允許我

00:05:37.190 --> 00:05:39.845
指定我要接收資料的格式

00:05:39.845 --> 00:05:43.405
所以這裡我期望的格式是：
日、月、年

00:05:43.405 --> 00:05:45.200
如果你上網查Python

00:05:45.200 --> 00:05:47.630
關於這個函數的線上說明

00:05:47.630 --> 00:05:50.390
它會告訴你
這些%d, %m, %Y代表甚麼意思

00:05:50.390 --> 00:05:53.300
可能是代表要使用兩位數年份、

00:05:53.300 --> 00:05:55.685
四位數位年、月、日等

00:05:55.685 --> 00:05:58.250
然後我可以將我
從"input"函數

00:05:58.250 --> 00:06:02.060
取得的字串

00:06:02.060 --> 00:06:04.595
轉換為日期型別

00:06:04.595 --> 00:06:06.790
但只是要把日期
輸出到螢幕上

00:06:06.790 --> 00:06:08.840
需要搞到這麼麻煩嗎？

00:06:08.840 --> 00:06:10.630
請記得"datetime"函式庫中
有很多

00:06:10.630 --> 00:06:12.429
很酷的函數可以
幫你處理日期跟時間

00:06:12.429 --> 00:06:15.115
例如加減天數等等

00:06:15.115 --> 00:06:18.550
這就是為什麼
有時候值得花功夫

00:06:18.550 --> 00:06:22.390
將字串轉為
一個"datetime"物件

00:06:22.390 --> 00:06:23.875
如果你所做的只是將
"input"取得的值儲存成一個變數

00:06:23.875 --> 00:06:25.000
那這個變數裡面的值
會是字串型別

00:06:25.000 --> 00:06:26.740
但如果你想使用這些
很酷的日期功能

00:06:26.740 --> 00:06:29.094
你需要將它儲存為
"datetime"型別

00:06:29.094 --> 00:06:31.850
那時你就需要用到
"strptime"函數了

00:06:32.610 --> 00:06:34.960
所以接下來我可以問：

00:06:34.960 --> 00:06:36.485
我生日的前一天是哪一天？

00:06:36.485 --> 00:06:40.570
所以一旦我用"strptime"函數
把值轉換了"datetime"資料型別

00:06:40.570 --> 00:06:42.400
之後我就可以

00:06:42.400 --> 00:06:44.500
使用我們之前用過的
"timedelta"函數

00:06:44.500 --> 00:06:45.760
找出我生日的前一天

00:06:45.760 --> 00:06:47.200
是幾月幾號，等等

00:06:47.200 --> 00:06:52.300
超棒
但只要你開始在程式中做這種操作

00:06:52.300 --> 00:06:54.290
你就要學「例外處理」

00:06:54.290 --> 00:06:58.010
因為程式通常是寫給別人用的
而你無法確保每個使用者都會老老實實

00:06:58.010 --> 00:07:01.680
按照你規定的格式輸入他們的日期
例如，他們可能會輸入2月30日

00:07:01.680 --> 00:07:03.690
或者他們可能會輸入月、日、年

00:07:03.690 --> 00:07:05.020
而不是日、月、年

00:07:05.020 --> 00:07:09.005
然後，碰！
你的程式就會爆炸

00:07:09.005 --> 00:07:12.485
因此最好確保我們可以
優雅的處理例外狀況

00:07:12.485 --> 00:07:14.030
即使有人輸入錯誤的格式

00:07:14.030 --> 00:07:15.350
程式也能妥善處理

00:07:15.350 --> 00:07:17.120
而不是讓它直接
在使用者目前爆炸

00:07:17.120 --> 00:07:19.300
因此錯誤處理也是非常重要的

00:07:19.300 --> 00:07:22.170
我們會在在後面的章節學到

