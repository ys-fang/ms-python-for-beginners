WEBVTT

00:00:04.700 --> 00:00:07.680
>> 好的
讓我們開始一寫些程式

00:00:07.681 --> 00:00:09.700
我們要從
"print"述句開始

00:00:09.701 --> 00:00:12.465
這也是開始學習
大多數程式語言的方法

00:00:12.466 --> 00:00:15.780
當你要輸出一個訊息
到命令列

00:00:15.781 --> 00:00:17.610
可能是給使用者看的

00:00:17.611 --> 00:00:19.510
也可能是為了除錯
而寫給你自己看的

00:00:19.511 --> 00:00:21.750
我們使用Python的
"print"述句

00:00:21.751 --> 00:00:23.640
它就是把訊息
輸出到螢幕的函數

00:00:23.641 --> 00:00:25.875
然後在括號中
輸入字串

00:00:25.876 --> 00:00:28.050
任何你想要
顯示在螢幕上的訊息

00:00:28.051 --> 00:00:30.455
你可以用單引號來
圍繞這個字串

00:00:30.456 --> 00:00:33.800
或者用雙引號也行

00:00:33.801 --> 00:00:36.395
這是一個Python語言
跟別的語言不太一樣的地方

00:00:36.396 --> 00:00:40.250
就是不管用單引號或
雙引號都可以正常執行

00:00:40.251 --> 00:00:42.470
但要注意
兩種都可以用並不代表

00:00:42.471 --> 00:00:45.040
字串前後的引號可以不同

00:00:45.041 --> 00:00:46.940
字串前的引號必須
跟字串後的引號一致

00:00:46.941 --> 00:00:49.250
在整個課程中我們會
全部都使用單引號

00:00:49.251 --> 00:00:51.755
來圍繞字串

00:00:51.756 --> 00:00:53.750
這是我們選擇的風格

00:00:53.751 --> 00:00:56.330
保持一致的風格

00:00:56.331 --> 00:00:58.655
可以幫助別人
更容易讀懂你的程式碼

00:00:58.656 --> 00:01:01.550
你可以選擇你偏好的風格
但請保持一致

00:01:01.551 --> 00:01:04.430
永遠使用雙引號或
永遠使用單引號

00:01:04.431 --> 00:01:06.020
你會很高興知道
兩種引號都可以用

00:01:06.021 --> 00:01:07.660
因為你可能會在網路上
找到某些範例用單引號

00:01:07.661 --> 00:01:11.460
而有些用雙引號，但沒關係
他們都可以被正常執行

00:01:11.720 --> 00:01:15.240
另一件事你可能
常常會做的是

00:01:15.241 --> 00:01:18.215
在執行程式過程中
要求使用者輸入資訊

00:01:18.216 --> 00:01:20.735
我們通過使用
"input"函數

00:01:20.736 --> 00:01:22.580
先輸入"input"

00:01:22.581 --> 00:01:25.175
然後參數是我們希望
顯示在螢幕上的提示

00:01:25.176 --> 00:01:27.080
例如：
"嘿，請輸入你的姓名"

00:01:27.081 --> 00:01:29.450
然後讓使用者輸入任何值

00:01:29.451 --> 00:01:31.460
只要使用者在螢幕上
輸入值並敲"Enter"

00:01:31.461 --> 00:01:33.740
輸入的值就會被儲存在
"name"這個變數中

00:01:33.741 --> 00:01:36.500
然後我們就可以
在螢幕上輸出

00:01:36.501 --> 00:01:38.510
"name"這個變數的內容

00:01:38.511 --> 00:01:41.790
或根據需要
在程式中使用它

00:01:43.310 --> 00:01:46.120
當你要輸出結果到螢幕上

00:01:46.121 --> 00:01:48.185
它可以很快的
就變成一片混亂

00:01:48.186 --> 00:01:49.520
因此適度插入空行

00:01:49.521 --> 00:01:52.720
能有效地增加
輸出的可讀性

00:01:52.721 --> 00:01:55.130
我們有幾種方法
可以產生空白行

00:01:55.131 --> 00:01:57.740
我們可以直接
"print()"

00:01:57.741 --> 00:02:01.300
括號內沒有任何東西

00:02:01.301 --> 00:02:02.810
這就會輸出一行空白行

00:02:02.811 --> 00:02:06.905
而每個"print"述句
輸出結束後都會換行

00:02:06.906 --> 00:02:09.230
所以如果你有一行
"print('Hello')"

00:02:09.231 --> 00:02:10.970
然後下一行"print('World')"

00:02:10.971 --> 00:02:13.520
Hello與World之間會換行

00:02:13.521 --> 00:02:17.050
此外，你還可以插入"\n"

00:02:17.051 --> 00:02:18.955
這其實代表一個
特殊字元

00:02:18.956 --> 00:02:20.650
意思是在此處插入新行

00:02:20.651 --> 00:02:23.630
一旦用了"\n"

00:02:23.631 --> 00:02:24.980
就表示在這個地方換行

00:02:24.981 --> 00:02:27.510
如果需要
你可以在字串的中間使用它

00:02:28.330 --> 00:02:31.790
"print"述句對寫程式來說
非常有用的原因之一

00:02:31.791 --> 00:02:34.495
就是可以用來除錯

00:02:34.496 --> 00:02:36.355
有時候在我們寫程式時

00:02:36.356 --> 00:02:38.030
彈出錯誤訊息

00:02:38.031 --> 00:02:40.385
或者跑出來的結果
跟我們預期的不一樣

00:02:40.386 --> 00:02:43.250
這時候我們會添加
"print"述句

00:02:43.251 --> 00:02:45.950
並不是加了就會讓程式變正確

00:02:45.951 --> 00:02:47.480
而是"print"可以讓我們找出

00:02:47.481 --> 00:02:49.040
程式錯在哪裡

00:02:49.041 --> 00:02:51.200
藉由觀察哪幾行"print"
被成功執行

00:02:51.201 --> 00:02:53.660
而哪幾行"print"
沒有被執行到

00:02:53.661 --> 00:02:54.950
以這個範例來看

00:02:54.951 --> 00:02:58.100
你可以看到
"Adding number"這行有成功輸出

00:02:58.101 --> 00:03:00.620
下一行執行加法運算

00:03:00.621 --> 00:03:01.820
然後我看到"Performing division"
也成功輸出

00:03:01.821 --> 00:03:04.800
這表示這行之前的程式沒有爆炸
接著在下一行執行除法運算

00:03:04.801 --> 00:03:08.090
然後我看到了
錯誤訊息噴了出來

00:03:08.091 --> 00:03:11.285
這樣就幫我找出了
程式出錯的地方

00:03:11.286 --> 00:03:15.020
因為我沒看到"Math complete"
這行輸出到螢幕，這表示它沒有被執行到

00:03:15.021 --> 00:03:17.600
也就是在這行之前，程式就出錯了
到底是哪一行程式碼出問題就很明顯了

00:03:17.601 --> 00:03:20.390
所以在幫程式除錯時
"print"是一個非常有用的工具

00:03:20.391 --> 00:03:21.860
只要添加和刪除
"print"述句

00:03:21.861 --> 00:03:23.765
就能讓你搞清楚
發生了什麼事

00:03:23.766 --> 00:03:25.820
好的
接下來就讓我們用

00:03:25.821 --> 00:03:28.890
VS Code實際操作看看

