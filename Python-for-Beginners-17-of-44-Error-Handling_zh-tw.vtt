WEBVTT

00:00:03.200 --> 00:00:08.070
>> 如果你跟我一樣

00:00:08.070 --> 00:00:11.030
在第一次寫程式時

00:00:11.030 --> 00:00:13.260
有些事情搞不定

00:00:13.260 --> 00:00:17.675
不管你已經做得多完美

00:00:17.675 --> 00:00:20.525
但在現實世界中

00:00:20.525 --> 00:00:22.519
常有你沒想到的岔路

00:00:22.519 --> 00:00:25.570
有時也會因為

00:00:25.570 --> 00:00:27.450
你自己犯的錯誤

00:00:27.450 --> 00:00:29.810
還有時候是因為
外在事物的改變

00:00:29.810 --> 00:00:32.405
例如資料庫下線

00:00:32.405 --> 00:00:35.310
伺服器名稱被更改等

00:00:35.310 --> 00:00:37.580
導致我的應用程式

00:00:37.580 --> 00:00:40.115
無法適應變化

00:00:40.115 --> 00:00:44.300
而可能會拋錨

00:00:44.300 --> 00:00:47.000
因此，讓我們來談談

00:00:47.000 --> 00:00:49.685
如何處理那些
不同類型的錯誤

00:00:49.685 --> 00:00:52.280
但在我們談論
如何處理他們之前

00:00:52.280 --> 00:00:55.745
也許我們應該先
定義一下專有名詞

00:00:55.745 --> 00:00:58.910
所謂「錯誤處理」

00:00:58.910 --> 00:01:00.545
跟「除錯」

00:01:00.545 --> 00:01:06.170
是兩件截然不同的事

00:01:06.170 --> 00:01:11.020
有時人們以為
這兩個詞差不多

00:01:11.020 --> 00:01:12.750
但他們真的不一樣

00:01:12.750 --> 00:01:15.470
錯誤處理是當我

00:01:15.470 --> 00:01:18.035
執行程式時遇到一個問題

00:01:18.035 --> 00:01:21.680
但它不是我在程式完工上線前

00:01:21.680 --> 00:01:26.345
可以預料到的

00:01:26.345 --> 00:01:31.069
最常見的例子是權限問題、

00:01:31.069 --> 00:01:35.315
資料庫改變、
伺服器停機等等

00:01:35.315 --> 00:01:37.780
現實世界中

00:01:37.780 --> 00:01:40.035
這些事就是會發生

00:01:40.035 --> 00:01:43.490
有些事情是
我們無法控制的

00:01:43.490 --> 00:01:45.620
相對的

00:01:45.620 --> 00:01:50.140
除錯是我的程式有問題

00:01:50.140 --> 00:01:52.685
它可能導致錯誤的結果

00:01:52.685 --> 00:01:56.540
或者讓程式崩潰

00:01:56.540 --> 00:02:00.290
我知道我寫的程式
有地方不正確

00:02:00.290 --> 00:02:04.585
導致結果不正確

00:02:04.585 --> 00:02:06.420
這就是除錯

00:02:06.420 --> 00:02:11.060
所以我們馬上會講解到的

00:02:11.060 --> 00:02:13.610
"try / except / finally"等關鍵字

00:02:13.610 --> 00:02:18.835
並不是除錯時用的工具

00:02:18.835 --> 00:02:21.690
"try / except / finally"

00:02:21.690 --> 00:02:24.770
應該是用在我
所無法掌控的地方

00:02:24.770 --> 00:02:28.130
用在我不確定
會不會出錯的地方

00:02:28.130 --> 00:02:30.350
但我希望程式
不要直接掛掉

00:02:30.350 --> 00:02:33.515
而是讓程式能在出錯時

00:02:33.515 --> 00:02:36.140
還能優雅的退出

00:02:36.140 --> 00:02:37.880
希望大家能清楚

00:02:37.880 --> 00:02:40.660
這兩者之間的區別

00:02:40.660 --> 00:02:43.470
當我們談論錯誤時

00:02:43.470 --> 00:02:46.055
在我們的程式中可能出的錯

00:02:46.055 --> 00:02:48.875
可以分成三種不同的類別

00:02:48.875 --> 00:02:52.895
語法錯誤、執行期錯誤
和邏輯錯誤

00:02:52.895 --> 00:02:55.555
讓我們先解釋語法錯誤

00:02:55.555 --> 00:02:57.560
一旦出現語法錯誤

00:02:57.560 --> 00:03:02.060
程式根本不會運行

00:03:02.060 --> 00:03:06.290
相信我
如果你有選擇

00:03:06.290 --> 00:03:09.545
這會是三種錯誤之中
你最想遇到的那一個

00:03:09.545 --> 00:03:13.010
因為這錯誤通常是

00:03:13.010 --> 00:03:16.520
最容易被找出來的

00:03:16.520 --> 00:03:19.310
你的程式會在
你寫錯的地方直接爆炸

00:03:19.310 --> 00:03:22.460
通常錯誤訊息
也能夠精確指出

00:03:22.460 --> 00:03:26.000
你寫錯的地方

00:03:26.000 --> 00:03:27.890
所以我們看一下輸出

00:03:27.890 --> 00:03:31.520
你會注意到
它直接告訴我，就是這裡

00:03:31.520 --> 00:03:33.410
讓我把它圈出來

00:03:33.410 --> 00:03:37.165
它告訴我就在這行
程式碼的這個位置

00:03:37.165 --> 00:03:41.830
所以如果我們
仔細看看這段程式

00:03:41.830 --> 00:03:45.070
關於"if"述句
我們以後會詳細解釋

00:03:45.070 --> 00:03:47.320
現在你只要知道
我們在這裡就只是

00:03:47.320 --> 00:03:50.275
在"y"之後
少了一個冒號

00:03:50.275 --> 00:03:52.270
這就是為什麼
它報了一個語法錯誤

00:03:52.270 --> 00:03:55.675
因為我們漏打了什麼

00:03:55.675 --> 00:03:59.110
一個Python很棒的設計就是

00:03:59.110 --> 00:04:02.540
它不需要使用大括號

00:04:02.540 --> 00:04:05.605
當你試圖找出程式中
出了什麼問題

00:04:05.605 --> 00:04:09.355
你不必擔心少打了
或多打了大括號

00:04:09.355 --> 00:04:11.214
如果你寫過Java或
JavaScript

00:04:11.214 --> 00:04:15.865
你會知道大括號有時
會引起一些問題

00:04:15.865 --> 00:04:19.460
因此，我們寧願
看到的是語法錯誤

00:04:19.460 --> 00:04:23.255
執行期錯誤是
第二好的錯誤類型

00:04:23.255 --> 00:04:25.310
當程式執行到一半

00:04:25.310 --> 00:04:27.080
出了問題

00:04:27.080 --> 00:04:29.435
爆炸了

00:04:29.435 --> 00:04:31.190
以這個範例來說

00:04:31.190 --> 00:04:34.550
我遇到的是一個
很經典的錯誤

00:04:34.550 --> 00:04:38.795
試圖除以零

00:04:38.795 --> 00:04:41.495
當程式跑到這一行時

00:04:41.495 --> 00:04:44.030
它會報錯
就像下面寫的：

00:04:44.030 --> 00:04:46.985
除以零

00:04:46.985 --> 00:04:51.320
這樣的錯誤訊息
也可以讓我輕鬆的

00:04:51.320 --> 00:04:57.080
找出哪一行有問題
是什麼問題

00:04:57.080 --> 00:05:01.350
執行期錯誤其實蠻準確的

00:05:01.350 --> 00:05:03.650
它會給我一些資訊

00:05:03.650 --> 00:05:05.810
讓我知道從哪裡

00:05:05.810 --> 00:05:10.795
開始嘗試除錯

00:05:10.795 --> 00:05:12.915
當你收到執行期錯誤時

00:05:12.915 --> 00:05:15.080
你該用的基本策略就是

00:05:15.080 --> 00:05:17.500
從它告訴你的行數開始

00:05:17.500 --> 00:05:22.630
尋找哪裡寫錯了

00:05:22.630 --> 00:05:25.940
在這裡我想給你一個重要的提示

00:05:25.940 --> 00:05:28.510
當你處理與執行期錯誤時

00:05:28.510 --> 00:05:30.430
我向你保證

00:05:30.430 --> 00:05:33.875
問題幾乎都在你的程式碼中

00:05:33.875 --> 00:05:36.785
我常常看到初學者

00:05:36.785 --> 00:05:39.885
遇到錯誤時

00:05:39.885 --> 00:05:42.520
總是先懷疑

00:05:42.520 --> 00:05:45.275
這可能是他們正在用的

00:05:45.275 --> 00:05:48.784
框架內部的問題

00:05:48.784 --> 00:05:52.690
或可能是執行平台的問題

00:05:52.690 --> 00:05:57.390
雖然技術上講
這是有可能的

00:05:57.390 --> 00:06:01.580
但機率很低

00:06:01.580 --> 00:06:04.520
你抓到熱門框架中
Bug的機率

00:06:04.520 --> 00:06:08.510
大概比中彩券還低

00:06:08.510 --> 00:06:11.375
再說一遍
我不是說這不會發生

00:06:11.375 --> 00:06:13.955
但極其罕見

00:06:13.955 --> 00:06:15.770
我幾乎可以保證

00:06:15.770 --> 00:06:18.470
如果你遇到執行期錯誤

00:06:18.470 --> 00:06:21.400
除非像是伺服器連線失敗這種

00:06:21.400 --> 00:06:25.550
幾乎都是你自己的
程式碼中有錯

00:06:25.550 --> 00:06:28.145
前後找一找

00:06:28.145 --> 00:06:30.680
通常都能找到問題在哪裡

00:06:30.680 --> 00:06:34.100
好，讓我們再講一些小細節

00:06:34.100 --> 00:06:37.175
就結束
"try / except / finally"的話題

00:06:37.175 --> 00:06:40.130
先很快的看一下這個範例

00:06:40.130 --> 00:06:43.190
我們會在下一單元
詳細講解語法

00:06:43.190 --> 00:06:46.220
現在我們只要大概知道

00:06:46.220 --> 00:06:49.140
這幾行程式碼的邏輯就好

00:06:49.140 --> 00:06:52.520
這個範例沒有用到"else"

00:06:52.520 --> 00:06:54.350
"else"是說如果沒爆炸的話

00:06:54.350 --> 00:06:57.890
要執行什麼

00:06:57.890 --> 00:06:59.390
我們在下一單元的範例會用到

00:06:59.390 --> 00:07:01.700
但不管有沒有用"else"

00:07:01.700 --> 00:07:06.370
都可以正常執行

00:07:06.370 --> 00:07:09.085
現在，最後幾句話

00:07:09.085 --> 00:07:13.475
我知道投影片上的第一點
可能有點讓人困惑

00:07:13.475 --> 00:07:16.280
但聽我說

00:07:16.280 --> 00:07:19.315
"try / except / finally"
並不是用來找Bug的

00:07:19.315 --> 00:07:22.265
讓我們再次釐清什麼是Bug

00:07:22.265 --> 00:07:25.820
Bug就是程式中有地方寫錯

00:07:25.820 --> 00:07:28.670
以致程式無法

00:07:28.670 --> 00:07:31.805
走預期的路徑

00:07:31.805 --> 00:07:33.755
產生預期的結果

00:07:33.755 --> 00:07:36.930
而這應該是我的程式
可以控制的

00:07:36.930 --> 00:07:38.750
但如果狀況是伺服器下線、

00:07:38.750 --> 00:07:41.525
或者資料來自使用者的輸入

00:07:41.525 --> 00:07:43.610
這些狀況不一定總是

00:07:43.610 --> 00:07:45.815
在我能控制的範圍

00:07:45.815 --> 00:07:49.070
這時候才該用
"try / except / finally"

00:07:49.070 --> 00:07:51.620
但如果我確實知道
我的程式有問題

00:07:51.620 --> 00:07:56.585
這就不是用
"try / except / finally"的時機

00:07:56.585 --> 00:07:59.120
另外要強調一件事

00:07:59.120 --> 00:08:01.985
如果你不打算
對錯誤做任何處理

00:08:01.985 --> 00:08:05.000
你不必攔截所有的錯誤

00:08:05.000 --> 00:08:07.445
如果你不打算記錄它

00:08:07.445 --> 00:08:10.730
如果你不讓它
優雅地退出

00:08:10.730 --> 00:08:14.165
那就別管它了

00:08:14.165 --> 00:08:17.360
我永遠記得我以前

00:08:17.360 --> 00:08:20.525
使用一個別人寫的框架

00:08:20.525 --> 00:08:23.300
他們的程式是這樣寫的

00:08:23.300 --> 00:08:26.780
如果資料庫拋出一個錯誤
它會攔截錯誤訊息

00:08:26.780 --> 00:08:30.160
然後只還給我
一般的錯誤訊息

00:08:30.160 --> 00:08:34.205
這使得除錯變得不可能

00:08:34.205 --> 00:08:40.745
因為我永遠也看不到
原始錯誤訊息是甚麼

00:08:40.745 --> 00:08:44.105
所以如果你不打算對
錯誤訊息做任何加工

00:08:44.105 --> 00:08:45.790
就放手吧

00:08:45.790 --> 00:08:48.060
你可能會想，"嗯，
等一下，克里斯多夫"

00:08:48.060 --> 00:08:50.400
這會讓我的程式崩潰

00:08:50.400 --> 00:08:52.815
但，你知道嗎？

00:08:52.815 --> 00:08:55.250
有時，這正是
我們希望發生的

00:08:55.250 --> 00:08:57.260
如果我們的程式

00:08:57.260 --> 00:09:00.455
進入一個無法繼續
執行下去的狀態

00:09:00.455 --> 00:09:03.020
沒關係
那就讓它崩潰吧

00:09:03.020 --> 00:09:05.980
這正是崩潰的功用

00:09:05.980 --> 00:09:11.695
有時候讓程式崩潰
是最好的選擇

00:09:11.695 --> 00:09:15.890
最後一種錯誤類型
是邏輯錯誤

00:09:15.890 --> 00:09:21.785
邏輯錯誤是
程式可以被編譯成功

00:09:21.785 --> 00:09:23.510
沒有語法錯誤

00:09:23.510 --> 00:09:25.440
沒有錯誤訊息

00:09:25.440 --> 00:09:27.140
也沒有執行期錯誤

00:09:27.140 --> 00:09:30.635
電腦沒有告訴我們
哪裡出錯

00:09:30.635 --> 00:09:32.210
在這個範例中

00:09:32.210 --> 00:09:33.560
你可以看到

00:09:33.560 --> 00:09:36.060
這裡有幾個變數

00:09:37.820 --> 00:09:40.595
我用螢光筆標示一下

00:09:40.595 --> 00:09:42.590
好，繼續

00:09:42.590 --> 00:09:44.950
我有個變數 x 是 206

00:09:44.950 --> 00:09:46.565
我有個變數 x 是 206

00:09:46.565 --> 00:09:48.425
我有個變數 y 是 42

00:09:48.425 --> 00:09:50.860
接著一個"if"述句

00:09:50.860 --> 00:09:53.460
如果 x 大於 y

00:09:53.460 --> 00:09:57.600
就輸出"x大於y"

00:09:57.600 --> 00:10:00.120
現在我執行程式

00:10:00.120 --> 00:10:03.510
但我卻沒有得到回應

00:10:03.510 --> 00:10:05.570
如果你仔細聽

00:10:05.570 --> 00:10:07.835
你可能會有注意到

00:10:07.835 --> 00:10:11.165
我寫的跟我說的
其實不一樣

00:10:11.165 --> 00:10:19.850
我的程式實際上
寫成 x 小於 y

00:10:19.850 --> 00:10:23.795
是的，用了 "<"

00:10:23.795 --> 00:10:29.720
然而我本來想寫
如果 x 大於 y

00:10:29.720 --> 00:10:35.180
這是毫無疑問是
最常見的錯誤之一

00:10:35.180 --> 00:10:37.375
起碼是我自己
最常犯的錯誤

00:10:37.375 --> 00:10:40.975
我經常搞反
我的布林值

00:10:40.975 --> 00:10:43.365
這裡有個
小地方要注意

00:10:43.365 --> 00:10:46.565
我會建議一定
要去了解一下

00:10:46.565 --> 00:10:49.130
單元測試和
測試驅動開發

00:10:49.130 --> 00:10:52.795
雖然它們超越了
本課程的範圍

00:10:52.795 --> 00:10:54.740
它們是編寫自動化測試

00:10:54.740 --> 00:10:58.540
來測試並抓程式中的錯誤

00:10:58.540 --> 00:11:01.010
它們就是設計來抓

00:11:01.010 --> 00:11:03.530
這類型的錯誤

00:11:03.530 --> 00:11:06.215
我是單元測試的超級粉絲

00:11:06.215 --> 00:11:11.590
推薦大家多去了解一下
Python的單元測試

00:11:11.590 --> 00:11:14.305
總之，邏輯錯誤就是一種

00:11:14.305 --> 00:11:17.310
可以執行

00:11:17.310 --> 00:11:20.225
但結果不對的錯誤

00:11:20.225 --> 00:11:23.725
那麼我們要如何
找到錯誤所在呢？

00:11:23.725 --> 00:11:28.740
如果執行的時候

00:11:28.740 --> 00:11:31.400
Python拋出錯誤

00:11:31.400 --> 00:11:33.310
你可以查看堆疊軌跡
(stack trace)

00:11:33.310 --> 00:11:35.135
堆疊軌跡會列出

00:11:35.135 --> 00:11:38.390
執行過程中所有
呼叫過的函數

00:11:38.390 --> 00:11:41.750
最後一個被呼叫
到的函數在頂部

00:11:41.750 --> 00:11:44.060
最先被呼叫的在底部

00:11:44.060 --> 00:11:46.420
也就是你自己
寫的的程式

00:11:46.420 --> 00:11:48.655
其標示的行號

00:11:48.655 --> 00:11:51.980
就是找錯誤的起點

00:11:51.980 --> 00:11:56.540
嘗試尋找錯誤
重讀你的程式

00:11:56.540 --> 00:12:00.565
查找線上說明文件

00:12:00.565 --> 00:12:03.995
上網搜尋，stackoverflow.com
網站上通常都會有答案

00:12:03.995 --> 00:12:05.780
真的找不到的話
就休息一下

00:12:05.780 --> 00:12:08.090
我曾經無數次被

00:12:08.090 --> 00:12:10.445
我自己程式中的bug打敗

00:12:10.445 --> 00:12:12.400
但在我起來走一走之後

00:12:12.400 --> 00:12:16.500
或者我就回家
吃飯、睡覺

00:12:16.500 --> 00:12:17.865
第二天早上醒來

00:12:17.865 --> 00:12:20.445
我就會突然想到
啊！這就是問題所在

00:12:20.445 --> 00:12:21.660
然後重回電腦前面

00:12:21.660 --> 00:12:23.015
找到問題並修復它

00:12:23.015 --> 00:12:25.915
有時候你只是需要暫時抽離
讓腦袋從專注模式轉換到發散模式

00:12:25.915 --> 00:12:28.310
另一個重要的事
是有時你需要的

00:12:28.310 --> 00:12:30.350
只是另一雙眼睛

00:12:30.350 --> 00:12:32.570
如果你的夥伴中
也有人會寫Python

00:12:32.570 --> 00:12:34.465
請他們看看你的程式

00:12:34.465 --> 00:12:37.880
有時加進新的觀點

00:12:37.880 --> 00:12:42.025
正是除錯時所需要的

00:12:42.025 --> 00:12:45.110
這就是如何處理

00:12:45.110 --> 00:12:47.884
Python不同類型
錯誤的方法

00:12:47.884 --> 00:12:54.000
以及何時以及如何使用
"try / except / finally"

