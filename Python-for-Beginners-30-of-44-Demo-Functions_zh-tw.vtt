WEBVTT

00:00:05.000 --> 00:00:08.925
>> 接下來讓我們
在程式中使用一些函數

00:00:08.925 --> 00:00:10.440
這裡有些簡單的程式

00:00:10.440 --> 00:00:14.310
讓我們邊做邊講解

00:00:14.310 --> 00:00:17.100
我複製和貼上了
三行程式碼

00:00:17.100 --> 00:00:19.770
我宣告了"first_name"變數

00:00:19.770 --> 00:00:21.235
然後我用"print()"函數

00:00:21.235 --> 00:00:22.940
因為我想查看我的程式
花了多久時間執行

00:00:22.940 --> 00:00:24.630
藉由在程式的不同地方

00:00:24.630 --> 00:00:26.130
輸出時間戳記

00:00:26.130 --> 00:00:28.770
所以在之前的程式跑完後

00:00:28.770 --> 00:00:30.990
我輸出當前的日期和時間

00:00:30.990 --> 00:00:34.140
這種寫法可以
執行得很好

00:00:34.140 --> 00:00:35.910
執行看看

00:00:35.910 --> 00:00:37.740
看結果是甚麼

00:00:37.740 --> 00:00:42.730
"python print_time_repeated_code.py"

00:00:43.670 --> 00:00:45.750
所以當我執行程式

00:00:45.750 --> 00:00:47.435
你可以看到它執行成功

00:00:47.435 --> 00:00:49.435
我把終端機視窗拉大一點
讓你可以看到完整的輸出

00:00:49.435 --> 00:00:51.460
所以你可以看到它
輸出"task completed"

00:00:51.460 --> 00:00:54.115
目前日期和時間
和迴圈的輸出結果

00:00:54.115 --> 00:00:56.035
好的，既然我只是

00:00:56.035 --> 00:00:58.405
複製和貼上程式碼

00:00:58.405 --> 00:01:00.790
因為它是相同的程式碼
一遍又一遍

00:01:00.790 --> 00:01:04.565
所以我可以把這段程式碼
搬到這裡

00:01:04.565 --> 00:01:08.100
並新增名為"print_time"的函數

00:01:08.100 --> 00:01:11.125
不要忘記在函式定義的
最後有一個冒號

00:01:11.125 --> 00:01:14.685
"def"意味著定義
定義名為"print_time"的函數

00:01:14.685 --> 00:01:16.655
把我的程式碼貼到這裡

00:01:16.655 --> 00:01:20.470
要確保縮排四個空格

00:01:20.470 --> 00:01:22.810
好的，現在不論在哪裡

00:01:22.810 --> 00:01:24.625
只要我想執行
這三行程式碼

00:01:24.625 --> 00:01:27.650
我可以簡單地呼叫
"print_time()"函數

00:01:27.650 --> 00:01:31.680
所以在這裡和這裡

00:01:31.680 --> 00:01:37.450
除了"now()"函數的結果之外
我應該看到完全相同的輸出

00:01:37.450 --> 00:01:40.115
我不再複製和貼上程式碼

00:01:40.115 --> 00:01:42.185
改成呼叫函數

00:01:42.185 --> 00:01:43.715
每次你呼叫該函數

00:01:43.715 --> 00:01:47.465
這三行代碼就會被執行
好，我們存檔

00:01:47.465 --> 00:01:51.085
到終端機視窗
重新執行程式

00:01:51.085 --> 00:01:53.925
果然

00:01:53.925 --> 00:01:55.140
我們

00:01:55.140 --> 00:01:56.870
再次看到

00:01:56.870 --> 00:01:58.790
完全相同的輸出結果

00:01:58.790 --> 00:02:00.350
所以我看到"task completed"
和當前日期和時間

00:02:00.350 --> 00:02:01.460
然後它執行我的迴圈

00:02:01.460 --> 00:02:02.720
之後再顯示一次
"task completed"

00:02:02.720 --> 00:02:04.405
和當前日期和時間

00:02:04.405 --> 00:02:06.765
然後我可以在這裡

00:02:06.765 --> 00:02:08.810
寫註解

00:02:08.810 --> 00:02:13.970
這是一個要輸出
當前日期和時間的函數

00:02:13.970 --> 00:02:17.195
記得盡量幫所有
你自己創建的函數寫註解

00:02:17.195 --> 00:02:20.330
好的，如果有一天

00:02:20.330 --> 00:02:23.045
我學會了另一個
呼叫"datetime"的方法

00:02:23.045 --> 00:02:25.305
我不喜歡寫成
"datetime.datetime.now()"

00:02:25.305 --> 00:02:27.345
這樣寫總是會把程式設計師搞混

00:02:27.345 --> 00:02:31.190
所以我要改寫匯入函式庫的方式
"from datetime import datetime"

00:02:31.190 --> 00:02:32.570
關於函式庫

00:02:32.570 --> 00:02:34.625
我們在後面的章節會
更詳細來聊

00:02:34.625 --> 00:02:39.460
我們只要知道這行程式碼現在可以寫成
"datetime.now()"

00:02:39.460 --> 00:02:42.290
這是更乾淨的寫法
別人閱讀起來也更容易理解

00:02:42.290 --> 00:02:44.180
所以當我又多學會了
一點Python的技巧

00:02:44.180 --> 00:02:46.140
我想要把我的程式
改得漂亮一點

00:02:46.140 --> 00:02:48.170
我只需要改寫
一個地方

00:02:48.170 --> 00:02:49.580
因為現在

00:02:49.580 --> 00:02:51.545
任何時候我呼叫
"print_time()"

00:02:51.545 --> 00:02:53.890
都執行同一段程式碼

00:02:53.890 --> 00:02:57.180
好，但如果我想

00:02:57.180 --> 00:02:59.510
每次顯示不一樣的訊息

00:02:59.510 --> 00:03:03.740
不再每次都是
"task completed"呢？

00:03:03.740 --> 00:03:06.800
方法就是為
"print_time()"加上參數

00:03:06.800 --> 00:03:08.010
所以我可以說，"嘿，

00:03:08.010 --> 00:03:09.460
每次你呼叫"print_time()"時

00:03:09.460 --> 00:03:12.260
同時也告訴我你想顯示甚麼訊息"

00:03:12.260 --> 00:03:15.515
現在，它總是顯示
"task completed"

00:03:15.515 --> 00:03:21.355
所以，我可能會說告訴我想要顯示
"task_name"

00:03:21.355 --> 00:03:23.210
然後每次執行"print()"述句

00:03:23.210 --> 00:03:26.120
無論"task_name"是甚麼

00:03:26.120 --> 00:03:28.495
我都把它輸出到螢幕上

00:03:28.495 --> 00:03:30.095
現在，如果我這樣做，

00:03:30.095 --> 00:03:31.810
我必須確保

00:03:31.810 --> 00:03:33.955
每次我呼叫函數
我都有給它一個值

00:03:33.955 --> 00:03:37.345
所以，這裡是
"printed first name"

00:03:37.345 --> 00:03:40.360
這裡則是

00:03:40.360 --> 00:03:44.335
"completed for loop"

00:03:44.335 --> 00:03:47.140
所以當你宣告了一個
帶參數的函數

00:03:47.140 --> 00:03:49.135
呼叫時你必須傳遞值給它

00:03:49.135 --> 00:03:51.460
我們存檔，然後執行

00:03:51.460 --> 00:03:53.860
我們這次看到的是

00:03:53.860 --> 00:03:57.025
每次呼叫它
訊息都不一樣

00:03:57.025 --> 00:03:59.405
我們看到它輸出了
"printed first name"

00:03:59.405 --> 00:04:01.240
這是我傳過去的參數

00:04:01.240 --> 00:04:03.160
然後是目前的日期和時間

00:04:03.160 --> 00:04:04.600
然後執行我的迴圈

00:04:04.600 --> 00:04:06.580
然後再次呼叫"print_time()"
並傳入參數

00:04:06.580 --> 00:04:09.680
"completed for loop"
以及目前的時間和日期

00:04:10.940 --> 00:04:12.980
這給了我們

00:04:12.980 --> 00:04:16.475
參數給了我們更大的
靈活性來使用函數

00:04:16.475 --> 00:04:18.500
我們可以藉由參數

00:04:18.500 --> 00:04:21.140
改變函數執行的結果

00:04:21.140 --> 00:04:23.645
好的，有時候

00:04:23.645 --> 00:04:25.940
我們可能有
更複雜的程式碼

00:04:25.940 --> 00:04:30.080
我們換個範例程式

00:04:30.080 --> 00:04:32.810
讓我們來看看
這個"get_initials.py"

00:04:32.810 --> 00:04:34.505
這個程式會做什麼呢？

00:04:34.505 --> 00:04:36.170
我把側邊攔關掉

00:04:36.170 --> 00:04:37.715
讓我們專注于程式碼本身

00:04:37.715 --> 00:04:40.985
是我們要求使用者
輸入他們的名字

00:04:40.985 --> 00:04:42.440
他們的中間名
和他們的姓

00:04:42.440 --> 00:04:45.545
然後提取每個名稱中的
第一個字母

00:04:45.545 --> 00:04:47.540
因此我們從
使用者的輸入取得名字

00:04:47.540 --> 00:04:49.970
我們從字串的
索引0擷取到索引1

00:04:49.970 --> 00:04:51.470
所以得到索引0的字元

00:04:51.470 --> 00:04:53.420
然後我們對中間名和姓氏
做同樣的事情

00:04:53.420 --> 00:04:55.880
也就等於返回他們的
字首縮寫

00:04:55.880 --> 00:04:58.175
所以如果我執行這個程式

00:04:58.175 --> 00:05:01.500
看看輸出的結果

00:05:02.050 --> 00:05:06.345
哎呀，我忘了輸入
副檔名".py"了

00:05:06.345 --> 00:05:09.615
我的名字是蘇珊
中間名是簡

00:05:09.615 --> 00:05:12.210
姓氏是伊巴赫

00:05:12.210 --> 00:05:14.640
它輸出我的
字首縮寫是"sji"

00:05:14.640 --> 00:05:17.260
這個程式成功執行了

00:05:17.260 --> 00:05:20.015
但這三段程式碼基本上
是完全相同的邏輯

00:05:20.015 --> 00:05:21.590
一次又一次的重複

00:05:21.590 --> 00:05:24.260
所以還有另一種更好讀懂
也更有效率的寫法

00:05:24.260 --> 00:05:27.380
就是使用函數

00:05:27.380 --> 00:05:29.570
所以我到最前面

00:05:29.570 --> 00:05:34.225
創建名為"get_initials()"的函數

00:05:34.225 --> 00:05:38.085
當你呼叫它你會給它一個
名為"name"的參數

00:05:38.085 --> 00:05:42.980
然後定義一個變數"initial"

00:05:42.980 --> 00:05:46.460
來儲存"name"變數

00:05:46.460 --> 00:05:48.750
的第一個字元

00:05:48.750 --> 00:05:51.780
因為從索引0開始
到索引1結束

00:05:51.780 --> 00:05:53.320
但我現在要做的一點點不同

00:05:53.320 --> 00:05:55.090
在這個範例中

00:05:55.090 --> 00:05:56.410
我要回傳一個值

00:05:56.410 --> 00:05:58.420
給呼叫函數的人

00:05:58.420 --> 00:06:01.235
所以我說
"return initial"

00:06:01.235 --> 00:06:04.305
好的，現在我已經
會回傳字首縮寫

00:06:04.305 --> 00:06:06.605
所以我現在可以

00:06:06.605 --> 00:06:08.980
無論我在哪裡呼叫這個函數

00:06:08.980 --> 00:06:10.465
我可以簡單地說

00:06:10.465 --> 00:06:11.905
"每當我需要一個字首縮寫"

00:06:11.905 --> 00:06:14.740
就呼叫"get_initials"函數

00:06:14.740 --> 00:06:18.050
並傳遞我想獲得字首縮寫
的名字給它

00:06:18.050 --> 00:06:21.010
所以無論我在哪裡想
用到這個邏輯

00:06:21.010 --> 00:06:24.715
我就呼叫這個函數

00:06:24.715 --> 00:06:28.715
中間名

00:06:28.715 --> 00:06:30.450
改成"get_initials(middle_name)"

00:06:30.450 --> 00:06:33.310
姓氏
改成"get_initials(last_name)"

00:06:36.740 --> 00:06:40.275
存檔、再次執行

00:06:40.275 --> 00:06:42.630
執行結果應該要完全一樣

00:06:42.630 --> 00:06:45.075
輸入我的名字、中間名、姓氏

00:06:45.075 --> 00:06:48.825
它返回字首縮寫為"sji"

00:06:48.825 --> 00:06:51.285
好，我這樣改寫的好處是甚麼？

00:06:51.285 --> 00:06:52.740
如果你看看代碼

00:06:52.740 --> 00:06:54.790
我覺得這樣寫更直觀

00:06:54.790 --> 00:06:57.220
"get_initials"這個函數名稱
讓人猜到這函數在幹嘛

00:06:57.220 --> 00:06:59.155
應該就是"取得字首縮寫"的意思

00:06:59.155 --> 00:07:02.380
而在這裡我應該要寫註解

00:07:02.380 --> 00:07:08.480
"此函數將返回
名字的字首縮寫"

00:07:09.150 --> 00:07:12.610
除了增加可讀性
更大的好處是

00:07:12.610 --> 00:07:15.750
例如，現在我們有個問題，就是
最後的結果是小寫字母

00:07:15.750 --> 00:07:17.005
如果我需要解決這個問題

00:07:17.005 --> 00:07:19.055
我要做的就只是
改我的函數

00:07:19.055 --> 00:07:21.270
只要改一個地方就好

00:07:21.270 --> 00:07:25.210
"當我們返回縮寫，
讓我們使用大寫"

00:07:25.210 --> 00:07:28.130
之後在任何地方
呼叫"get_initials()"

00:07:28.130 --> 00:07:30.335
名字

00:07:30.335 --> 00:07:31.640
中間名，姓氏

00:07:31.640 --> 00:07:36.365
他們全都都傳回
大寫字母

00:07:36.365 --> 00:07:38.780
所以對我來說
函數真正的魔力

00:07:38.780 --> 00:07:41.735
在於讓程式碼
更容易維護

00:07:41.735 --> 00:07:44.930
函數還可以用參數做
一些很酷的事情

00:07:44.930 --> 00:07:47.700
讓我在下一單元告訴你

