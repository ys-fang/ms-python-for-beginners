WEBVTT

00:00:04.070 --> 00:00:07.425
>> 讓我們來看看
"try"， "except"， "finally"

00:00:07.425 --> 00:00:08.880
在這個範例中

00:00:08.880 --> 00:00:13.080
我用了一個經典的例子
就是除以零

00:00:13.080 --> 00:00:15.450
所以我已經寫了
在我的變數 x 和變數 y

00:00:15.450 --> 00:00:17.955
然後輸出結果

00:00:17.955 --> 00:00:22.020
然後說 x 除以 y

00:00:22.020 --> 00:00:26.145
存檔、執行

00:00:26.145 --> 00:00:31.115
"python demo.py"

00:00:31.115 --> 00:00:32.690
你會注意到，果然我

00:00:32.690 --> 00:00:34.330
收到一個錯誤訊息
告訴我

00:00:34.330 --> 00:00:37.015
"嘿，我們試圖除以零"

00:00:37.015 --> 00:00:39.290
順便說一下
我在上下各加一行

00:00:39.290 --> 00:00:40.610
"print()"

00:00:40.610 --> 00:00:42.365
只是希望輸出的結果
更易於閱讀

00:00:42.365 --> 00:00:47.980
不要跟"C:\"開頭的那一行
混在一起看

00:00:47.980 --> 00:00:51.875
所以現在我想做的是
我想並抓住這個錯誤

00:00:51.875 --> 00:00:54.589
所以我要用
"try"

00:00:54.589 --> 00:00:57.440
然後"print()"

00:00:57.440 --> 00:01:01.075
不過我們可以先
順便介紹一下

00:01:01.075 --> 00:01:08.490
一個 VS Code
的方便功能

00:01:08.490 --> 00:01:11.240
你會注意到的是

00:01:11.240 --> 00:01:14.300
這些小程式碼片段
會自己跑出來

00:01:14.300 --> 00:01:18.680
這個功能會根據
我輸入的語法

00:01:18.680 --> 00:01:24.965
猜我接下來要寫的語法
並讓我選擇

00:01:24.965 --> 00:01:29.090
我需要做的就只是
簡單地按下"Tab"鍵

00:01:29.090 --> 00:01:33.290
它會自動完成

00:01:33.290 --> 00:01:36.050
所以如果我選擇
"try/except/else/finally"

00:01:36.050 --> 00:01:40.120
然後按下"Tab"鍵

00:01:40.120 --> 00:01:42.335
VS Code就會幫我

00:01:42.335 --> 00:01:44.690
插入整段程式碼

00:01:44.690 --> 00:01:47.555
而不用我打這麼多字

00:01:47.555 --> 00:01:50.645
你會看到"pass"被標記了

00:01:50.645 --> 00:01:53.165
順便說一下，"pass"的意思

00:01:53.165 --> 00:01:54.695
就是跳過、不做任何事
直接執行下一步

00:01:54.695 --> 00:01:58.100
它只是為了讓語法保持有效
(譯註：你可以拿掉"pass"試看看)

00:01:58.100 --> 00:02:02.285
所以現在我可以繼續
說"try: print()"

00:02:02.285 --> 00:02:05.795
然後 x 除以 y

00:02:05.795 --> 00:02:09.320
然後我按"Tab"鍵

00:02:09.320 --> 00:02:11.720
錯誤的名稱是什麼呢？

00:02:11.720 --> 00:02:14.160
"ZeroDivisionError"

00:02:17.020 --> 00:02:22.730
"as e"
然後再"print()"

00:02:22.730 --> 00:02:32.370
輸出"不允許除以零"

00:02:32.370 --> 00:02:38.115
然後如果沒發生錯誤的話

00:02:38.115 --> 00:02:41.765
就執行"else"裡面的程式碼

00:02:41.765 --> 00:02:48.060
"finally"則是不管有沒有出錯
最後都會執行的程式碼

00:02:48.060 --> 00:02:50.720
順便說一下，你會注意到

00:02:50.720 --> 00:02:54.140
我剛才回頭去找例外的名稱是什麼
(譯註：ZeroDivisionError)

00:02:54.140 --> 00:02:56.460
這是我在現實世界中
每天做的事

00:02:56.460 --> 00:02:57.740
如果我不記得

00:02:57.740 --> 00:02:59.600
特定的例外名稱

00:02:59.600 --> 00:03:01.355
我要嘛去查說明文件

00:03:01.355 --> 00:03:05.840
要嘛就簡單地執行程式
並強制讓錯誤發生

00:03:05.840 --> 00:03:10.310
例如我想找出
連不到伺服器時的

00:03:10.310 --> 00:03:12.535
錯誤到底會叫什麼？
(譯註：叫"socket.error")

00:03:12.535 --> 00:03:15.460
我只要簡單地

00:03:15.460 --> 00:03:16.640
斷開與網路的連接

00:03:16.640 --> 00:03:18.290
執行程式

00:03:18.290 --> 00:03:19.685
然後看看出現什麼錯誤

00:03:19.685 --> 00:03:21.470
這樣就能很快的

00:03:21.470 --> 00:03:25.525
很容易的知道
例外名稱是甚麼

00:03:25.525 --> 00:03:30.255
讓我們實際
執行這個程式

00:03:30.255 --> 00:03:33.560
你會看到，它輸出

00:03:33.560 --> 00:03:36.560
"Not allowed to divide by Zero"

00:03:36.560 --> 00:03:42.595
然後是"finally"輸出的：
"This is our cleanup code"

00:03:42.595 --> 00:03:48.125
我們在這一集學到如何實際使用
"try / except / finally"

00:03:48.125 --> 00:03:50.960
並能夠寫一些些
自己的錯誤處理

00:03:50.960 --> 00:03:54.050
這其實也就是例外處理
最常做的事

00:03:54.050 --> 00:03:57.240
就是優雅地退出

