WEBVTT

00:00:04.130 --> 00:00:06.600
>> 好的，我們剛剛學到

00:00:06.600 --> 00:00:08.070
在函數中使用參數

00:00:08.070 --> 00:00:09.900
現在讓我們實際
來嘗試看看

00:00:09.900 --> 00:00:12.060
我們用跟之前學函數

00:00:12.060 --> 00:00:13.230
那一集用的範例

00:00:13.230 --> 00:00:15.585
一樣的函數

00:00:15.585 --> 00:00:17.745
一樣的這個"get_initial()"函數

00:00:17.745 --> 00:00:18.930
你要傳遞一個"name"參數

00:00:18.930 --> 00:00:20.970
它取"name"的第一個字元

00:00:20.970 --> 00:00:22.455
在將其轉換為大寫

00:00:22.455 --> 00:00:26.070
儲存，然後傳回值
給呼叫它的人

00:00:26.070 --> 00:00:28.095
而主體程式中

00:00:28.095 --> 00:00:31.200
我問使用者的名字
然後我呼叫函數說：

00:00:31.200 --> 00:00:32.460
"嘿，你剛剛給了我一個名字

00:00:32.460 --> 00:00:35.000
請還給我該名字字首縮寫"

00:00:35.000 --> 00:00:37.295
然後儲存它，並輸出到螢幕上

00:00:37.295 --> 00:00:38.945
輸出只是為了確認結果

00:00:38.945 --> 00:00:44.770
讓我們執行程式
"python get_initials_function.py"

00:00:44.770 --> 00:00:47.550
輸入我的名字

00:00:47.550 --> 00:00:49.820
即使我鍵入小寫"susan"

00:00:49.820 --> 00:00:53.880
它仍會大寫：
"Your initial is: S"

00:00:54.260 --> 00:00:56.930
如果這是為了產生

00:00:56.930 --> 00:00:58.940
使用者帳號

00:00:58.940 --> 00:01:01.100
我覺得用大寫的
名字的縮寫是蠻合理的

00:01:01.100 --> 00:01:03.200
但如果我要生成
電子郵件帳號

00:01:03.200 --> 00:01:05.960
可能小寫更合適

00:01:05.960 --> 00:01:08.255
所以讓我們添加第二個參數

00:01:08.255 --> 00:01:11.675
讓我們把它叫做"force_uppercase"

00:01:11.675 --> 00:01:14.610
現在我們要做的就是說

00:01:14.610 --> 00:01:19.575
嘿，當我呼叫這個函數，而且
如果"force_uppercase"為真

00:01:19.575 --> 00:01:21.080
這是一個布林變數

00:01:21.080 --> 00:01:22.460
所以我不必說" = True"

00:01:22.460 --> 00:01:24.155
只要說："if force_uppercase:"

00:01:24.155 --> 00:01:26.480
我們在學條件判斷
的時候學過這一點

00:01:26.480 --> 00:01:29.450
然後返回字首縮寫

00:01:29.450 --> 00:01:31.220
但如果"force_uppercase"為假

00:01:31.220 --> 00:01:36.420
我們也回傳"initial"
但不用先轉換為大寫

00:01:36.420 --> 00:01:38.420
所以如果"initial"是大寫
回傳值就是大寫

00:01:38.420 --> 00:01:39.830
如果"initial"是小寫

00:01:39.830 --> 00:01:41.710
回傳值就是小寫

00:01:41.710 --> 00:01:43.920
現在因為函數

00:01:43.920 --> 00:01:46.060
添加了第二個參數

00:01:46.060 --> 00:01:47.690
這意味著每次我呼叫它

00:01:47.690 --> 00:01:50.075
必須確保我
傳遞了兩個參數

00:01:50.075 --> 00:01:54.110
所以這裡我必須傳遞
第二個參數為真或假

00:01:54.110 --> 00:01:56.120
我這次用False

00:01:56.120 --> 00:01:59.600
所以這次如果我
輸入的名字是小寫

00:01:59.600 --> 00:02:02.000
它應該回傳
小寫的"initial"

00:02:02.000 --> 00:02:06.575
所以我第二個參數設為False
再次執行一次

00:02:06.575 --> 00:02:10.490
喔，我有一個語法錯誤

00:02:10.490 --> 00:02:11.690
我忘了在

00:02:11.690 --> 00:02:13.025
"else"之後

00:02:13.025 --> 00:02:16.675
加冒號

00:02:16.675 --> 00:02:18.900
讓我們再次運行。

00:02:18.900 --> 00:02:20.745
輸入我的名字"susan"

00:02:20.745 --> 00:02:24.470
它返回
"Your initial is: s"

00:02:24.470 --> 00:02:25.955
因為我們這次選擇
我們選擇不強制大寫

00:02:25.955 --> 00:02:27.575
所以現在我們可以控制

00:02:27.575 --> 00:02:29.750
要返回大寫或小寫

00:02:29.750 --> 00:02:33.380
而且可以在呼叫函數時再決定

00:02:33.380 --> 00:02:35.585
這樣我對程式就
有更多的控制權

00:02:35.585 --> 00:02:37.940
另外

00:02:37.940 --> 00:02:40.400
你還可以設定預設值

00:02:40.400 --> 00:02:42.965
所以如果我想要讓
沒有指定第二個參數時

00:02:42.965 --> 00:02:46.250
預設讓它變成大寫

00:02:46.250 --> 00:02:50.740
那我只要改一下函數的定義
並再次執行

00:02:50.740 --> 00:02:54.005
我仍然可以傳遞一個值
指定是否要強制轉大寫

00:02:54.005 --> 00:02:55.160
所以我仍然可以說

00:02:55.160 --> 00:02:58.595
"不，我不想它強迫它大寫"

00:02:58.595 --> 00:03:01.720
所以我傳遞值False
果然，當我執行它

00:03:01.720 --> 00:03:03.530
我若輸入小寫的"susan"

00:03:03.530 --> 00:03:05.585
它返回的就是小寫"s"

00:03:05.585 --> 00:03:08.690
但由於我指定了預設值

00:03:08.690 --> 00:03:12.650
我可以不傳遞第二個參數

00:03:12.650 --> 00:03:13.820
所以我可以僅傳遞名字

00:03:13.820 --> 00:03:16.935
然後說："嘿，要不要強制大寫？"

00:03:16.935 --> 00:03:20.010
"既然你有一個預設值
那你就用它吧"

00:03:20.010 --> 00:03:22.980
所以現在每次執行

00:03:22.980 --> 00:03:26.845
我用小寫字母輸入我的名字


00:03:26.845 --> 00:03:30.150
它說："你沒有給我
force_uppercase的值"

00:03:30.150 --> 00:03:33.655
"所以我只好用預設值
而預設值是True"

00:03:33.655 --> 00:03:35.660
因為"force_uppercase"是True
所以它會回傳大寫的字首縮寫

00:03:35.660 --> 00:03:37.550
所以現在你看到了

00:03:37.550 --> 00:03:39.935
這次它返回大寫字母

00:03:39.935 --> 00:03:42.930
因此，加預設值的意義就是

00:03:42.930 --> 00:03:46.310
讓別人能更容易的
呼叫你的函數

00:03:46.310 --> 00:03:49.430
我還提到一件事就是

00:03:49.430 --> 00:03:52.145
當呼叫參數時可以

00:03:52.145 --> 00:03:54.450
使用名稱記號(named notation)
來傳遞參數

00:03:54.450 --> 00:03:58.570
我可以寫
"force_uppercase = False"

00:03:58.570 --> 00:04:04.020
然後才是
"name = first_name"

00:04:04.020 --> 00:04:06.135
預設情況下，當你呼叫函數時

00:04:06.135 --> 00:04:07.850
你傳遞的第一個值

00:04:07.850 --> 00:04:09.560
會對應到第一個參數

00:04:09.560 --> 00:04:11.720
第二個值會對應到第二個參數等等

00:04:11.720 --> 00:04:14.135
但是，當你使用名稱記號

00:04:14.135 --> 00:04:16.430
它實現了兩件事：
讓程式更易於閱讀

00:04:16.430 --> 00:04:20.105
而且你傳遞參數
可以不用管順序

00:04:20.105 --> 00:04:22.860
所以在這個範例中

00:04:23.180 --> 00:04:27.090
你可以看到
我輸入小寫的名字

00:04:27.090 --> 00:04:29.840
而它返回小寫的字首縮寫

00:04:29.840 --> 00:04:32.630
因為我在程式中呼叫函數時
指定了"force_uppercase = False"

00:04:32.630 --> 00:04:35.810
因此具名參數
或命名標記法是

00:04:35.810 --> 00:04:36.860
一種更清楚的
函數呼叫方式

00:04:36.860 --> 00:04:40.290
能讓別人更容易理解你的程式碼

