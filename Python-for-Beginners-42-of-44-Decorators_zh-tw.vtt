WEBVTT

00:00:04.040 --> 00:00:07.740
>> 讓我們來談談"decorator"

00:00:07.740 --> 00:00:14.640
本系列課程的目標是
幫助你獲得一些

00:00:14.640 --> 00:00:16.320
Python的基礎知識

00:00:16.320 --> 00:00:18.900
讓你接下來可以開始

00:00:18.900 --> 00:00:21.750
學習如何使用諸如
"Cognitive Services"這樣的API

00:00:21.750 --> 00:00:24.495
以及創建網頁應用程式等等

00:00:24.495 --> 00:00:26.940
基本上我們希望

00:00:26.940 --> 00:00:29.460
當你看完所有影片

00:00:29.460 --> 00:00:31.680
你就有足夠的基礎知識

00:00:31.680 --> 00:00:34.455
可以開始閱讀一些說明文件

00:00:34.455 --> 00:00:37.950
閱讀一些「快速入門」

00:00:37.950 --> 00:00:40.395
然後大致看得懂

00:00:40.395 --> 00:00:42.150
所以還有一個基礎知識點

00:00:42.150 --> 00:00:45.980
我們需要介紹

00:00:45.980 --> 00:00:50.095
就是Python中有個東西
叫"decorator"

00:00:50.095 --> 00:00:54.770
現在，我要告訴你如何
創建一個"decorator"

00:00:54.770 --> 00:00:56.765
但老實說

00:00:56.765 --> 00:00:59.030
需要你自己創建
一個"decorator"

00:00:59.030 --> 00:01:01.790
的機會不會很多

00:01:01.790 --> 00:01:03.350
我演示如何創建一個"decorator"

00:01:03.350 --> 00:01:05.510
只是讓你能稍微了解

00:01:05.510 --> 00:01:07.670
它背後運作的原理

00:01:07.670 --> 00:01:10.630
它是如何運作的

00:01:10.630 --> 00:01:15.320
但我們可能會常常

00:01:15.320 --> 00:01:20.270
在我們的程式碼中

00:01:20.270 --> 00:01:22.220
使用到別人寫好的"decorator"

00:01:22.220 --> 00:01:24.500
所以如果你覺得

00:01:24.500 --> 00:01:26.330
你可能沒有機會
寫"decorator"

00:01:26.330 --> 00:01:28.340
所以不用學會如何
創建"decorator"

00:01:28.340 --> 00:01:29.930
那也沒關係

00:01:29.930 --> 00:01:32.870
但必須學會
使用"decorator"

00:01:32.870 --> 00:01:36.980
例如使用像"Flask"這樣的框架
來創建應用程式

00:01:36.980 --> 00:01:40.955
就會大量的用到"decorator"

00:01:40.955 --> 00:01:45.240
所以我們需要
稍微介紹一下"decorator"

00:01:45.240 --> 00:01:48.695
現在，我想先回顧之前學過的

00:01:48.695 --> 00:01:51.320
並聊一聊一些

00:01:51.320 --> 00:01:52.985
程式設計概念

00:01:52.985 --> 00:01:55.205
我想特別說一下

00:01:55.205 --> 00:01:58.070
物件以及
函數或方法

00:01:58.070 --> 00:02:01.390
物件就像是名詞
它們是資料構造

00:02:01.390 --> 00:02:03.570
他們是什麼？

00:02:03.570 --> 00:02:07.580
它們是我們要操作的對象

00:02:07.580 --> 00:02:10.760
然後函數和方法就像是動詞

00:02:10.760 --> 00:02:14.480
是操作的方法

00:02:14.480 --> 00:02:16.400
例如我們在程式中

00:02:16.400 --> 00:02:19.040
用到的"os"

00:02:19.040 --> 00:02:22.910
就被當作一個物件

00:02:22.910 --> 00:02:26.030
"getenv()"則是當動詞用

00:02:26.030 --> 00:02:27.200
這個動作所得到的結果

00:02:27.200 --> 00:02:30.640
就是環境變數

00:02:30.640 --> 00:02:35.900
而"decorator"則像是副詞

00:02:35.900 --> 00:02:39.725
它能給動詞增加一些修飾

00:02:39.725 --> 00:02:44.105
為函數加上更多能力

00:02:44.105 --> 00:02:48.000
也更方便的重用程式碼

00:02:48.000 --> 00:02:50.090
"decorator"是一種
Python的語法糖

00:02:50.090 --> 00:02:52.370
它其實是另一個函數

00:02:52.370 --> 00:02:56.540
當某個函數使用了這個語法糖時

00:02:56.540 --> 00:03:01.415
其實就是把自己當作一個參數

00:03:01.415 --> 00:03:04.510
傳給了"decorator"的函數

00:03:04.510 --> 00:03:10.430
然後"decorator"
附加某些功能上去

00:03:10.430 --> 00:03:12.395
讓我們用實際例子來看

00:03:12.395 --> 00:03:15.305
這是Flask的
一段範例程式碼

00:03:15.305 --> 00:03:19.715
Flask是一個Web應用框架

00:03:19.715 --> 00:03:22.445
我們可以使用Flask

00:03:22.445 --> 00:03:25.585
來開發Web應用程式

00:03:25.585 --> 00:03:27.800
當我們開發Web應用程式時

00:03:27.800 --> 00:03:30.800
很多時候我們需要

00:03:30.800 --> 00:03:36.410
從前端瀏覽器發出請求

00:03:36.410 --> 00:03:39.170
來呼叫後端的函數

00:03:39.170 --> 00:03:41.735
而呼叫的方法

00:03:41.735 --> 00:03:44.960
就是透過指定特定的URL

00:03:44.960 --> 00:03:49.430
我們之前呼叫API
也是用這種方式

00:03:49.430 --> 00:03:52.850
這個例子就是
伺服器網址之後加斜線

00:03:52.850 --> 00:03:56.090
然後後面接"products"

00:03:56.090 --> 00:03:57.380
你可能會好奇

00:03:57.380 --> 00:03:59.930
這樣伺服器怎麼就會知道

00:03:59.930 --> 00:04:02.710
要列出所有產品的種類

00:04:02.710 --> 00:04:04.820
那是因為在後端的某個地方

00:04:04.820 --> 00:04:08.360
註冊了當
前端呼叫這個網址時

00:04:08.360 --> 00:04:11.150
就要去呼叫哪一個函數

00:04:11.150 --> 00:04:17.605
而註冊的方法

00:04:17.605 --> 00:04:20.555
就是透過"decorator"

00:04:20.555 --> 00:04:22.910
因此當有前端
要求的網址是

00:04:22.910 --> 00:04:27.020
http://myserver/api/products

00:04:27.020 --> 00:04:31.415
後端就會去呼叫這個函數

00:04:31.415 --> 00:04:35.165
這個函數可能會去
查詢資料庫或做其他事

00:04:35.165 --> 00:04:38.420
不過我們這裡要教的

00:04:38.420 --> 00:04:42.020
不是"get_products"要怎麼寫

00:04:42.020 --> 00:04:44.040
而是要教上面這一行

00:04:44.040 --> 00:04:47.270
也就是"decorator"的用法

00:04:47.270 --> 00:04:49.460
我把它標記出來

00:04:49.460 --> 00:04:51.755
"@route()"

00:04:51.755 --> 00:04:55.415
我要你注意的是
"@rounte()"的參數

00:04:55.415 --> 00:04:59.835
"api/products"

00:04:59.835 --> 00:05:04.280
它跟前端要求的路徑完全匹配

00:05:04.280 --> 00:05:06.455
所以這行"decorator"

00:05:06.455 --> 00:05:11.750
實際上在告訴Flask

00:05:11.750 --> 00:05:17.010
當有人要求
"api/products"這個路徑時

00:05:17.010 --> 00:05:21.740
就要執行這段程式碼

00:05:21.740 --> 00:05:25.730
這一行就是所謂語法糖

00:05:25.730 --> 00:05:28.380
這就是"decorator"

00:05:28.380 --> 00:05:31.985
而你可能在某些時候

00:05:31.985 --> 00:05:33.500
會需要寫自己的"decorator"

00:05:33.500 --> 00:05:35.345
也或許你會好奇

00:05:35.345 --> 00:05:38.750
這到底怎麼做到的？

00:05:38.750 --> 00:05:42.980
這是"decorator"
背後運作機制的範例

00:05:42.980 --> 00:05:48.619
你可以看到
"decorator"實際上也是一個函數

00:05:48.619 --> 00:05:51.815
這個例子中是一個
名為"logger"的"decorator"

00:05:51.815 --> 00:05:54.550
而下面的那行語法糖
"@logger"

00:05:54.550 --> 00:05:57.260
實際上就等於
"logger(sample)"

00:05:57.260 --> 00:06:00.755
這裡就跟剛才Flask的範例一樣

00:06:00.755 --> 00:06:03.740
只是從"route"

00:06:03.740 --> 00:06:06.190
變成"logger"

00:06:06.190 --> 00:06:11.370
這裡的寫法就是跟Python說

00:06:11.370 --> 00:06:13.975
"嘿，如果有人使用了這個decorator"

00:06:13.975 --> 00:06:17.075
我們想讓你呼叫一個特定函數

00:06:17.075 --> 00:06:19.250
就是這個"wrapperr()"

00:06:19.250 --> 00:06:22.510
然後回傳這個函數

00:06:22.510 --> 00:06:24.695
而函數中的程式碼

00:06:24.695 --> 00:06:29.185
我要輸出兩個訊息
然後在中間

00:06:29.185 --> 00:06:33.155
將呼叫被傳入的參數
也就是套用此"decorator"的函數

00:06:33.155 --> 00:06:37.670
所以執行這個程式的最終

00:06:37.670 --> 00:06:39.365
會得到這樣的輸出結果

00:06:39.365 --> 00:06:42.845
我們會看到
"Logging execution"

00:06:42.845 --> 00:06:47.780
然後會看到
"-- Inside sample function"

00:06:47.780 --> 00:06:50.830
最後我們會看到
"Done logging"

00:06:50.830 --> 00:06:54.615
這就是我們創建一個
"decorator"的方法

00:06:54.615 --> 00:06:58.745
我再次強調

00:06:58.745 --> 00:07:01.190
我們大概不會經常

00:07:01.190 --> 00:07:03.710
需要自己寫"decorator"

00:07:03.710 --> 00:07:05.720
所以你看這些
你可能會覺得

00:07:05.720 --> 00:07:08.270
不知道何時會
需要這種寫法

00:07:08.270 --> 00:07:09.635
但沒關係

00:07:09.635 --> 00:07:11.720
因為你會需要創建
自己的"decorator"

00:07:11.720 --> 00:07:13.970
大概就是你需要創進

00:07:13.970 --> 00:07:18.940
自己的框架的時候

00:07:18.940 --> 00:07:21.515
而這時"decorator"
會很有用

00:07:21.515 --> 00:07:24.320
例如如果我
需要記錄執行過程

00:07:24.320 --> 00:07:27.260
就像我剛才
演示的那樣

00:07:27.260 --> 00:07:30.545
又或許我需要做一些
使用者身分認證

00:07:30.545 --> 00:07:34.955
也可能我需要確保
使用者已經登錄

00:07:34.955 --> 00:07:37.205
像這些情形我可能就會去
創建"decorator"

00:07:37.205 --> 00:07:39.065
但說實在的

00:07:39.065 --> 00:07:41.440
這些都是相對專門的操作

00:07:41.440 --> 00:07:43.050
而通常這些操作

00:07:43.050 --> 00:07:47.705
都已經有別人創建好的套件了

00:07:47.705 --> 00:07:48.920
所以如果你在這裡

00:07:48.920 --> 00:07:50.000
發現自己並沒有

00:07:50.000 --> 00:07:51.965
完全搞懂"decorator"

00:07:51.965 --> 00:07:54.125
其實也還好

00:07:54.125 --> 00:07:58.550
因為你最常使用

00:07:58.550 --> 00:08:01.280
"decorator"的方式

00:08:01.280 --> 00:08:04.655
就是去使用一個別人
已經寫好的"decorator"

00:08:04.655 --> 00:08:07.740
就像我們在這裡看到的

00:08:07.910 --> 00:08:12.140
所以在這個單元中

00:08:12.140 --> 00:08:15.935
我做了一個最簡單的範例
演示如何創建一個"decorator"

00:08:15.935 --> 00:08:19.295
然後如何呼叫
自己創建的"decorator"

00:08:19.295 --> 00:08:23.320
藉此稍微了解"decorator"
的運作機制

00:08:23.320 --> 00:08:26.195
如果你想更深入了解Python

00:08:26.195 --> 00:08:27.920
"decorator"是個有趣的課題

00:08:27.920 --> 00:08:29.540
但其實大多時候

00:08:29.540 --> 00:08:31.610
我們只要學會怎麼用

00:08:31.610 --> 00:08:33.980
別人寫好的"decorator"

00:08:33.980 --> 00:08:36.140
其實就已經足夠了

00:08:36.140 --> 00:08:37.550
就像我身後這個

00:08:37.550 --> 00:08:39.745
Flask的"route"的範例

00:08:39.745 --> 00:08:42.590
讓我們在下一單元
一行一行來實作吧

