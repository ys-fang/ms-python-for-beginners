WEBVTT

00:00:05.450 --> 00:00:08.430
>> 好的。克里斯多夫
已經在上一集

00:00:08.430 --> 00:00:11.115
告訴你VS Code和
外掛如何運作

00:00:11.115 --> 00:00:12.900
現在
讓我們正式進入VS Code

00:00:12.900 --> 00:00:15.075
並真正開始嘗試
寫一些程式

00:00:15.075 --> 00:00:17.790
當你在使用VS Code時

00:00:17.790 --> 00:00:20.730
你需要先在檔案系統中
新增一個資料夾

00:00:20.730 --> 00:00:22.140
那是用來存放

00:00:22.140 --> 00:00:24.060
你的專案中所有檔案的地方

00:00:24.060 --> 00:00:26.370
所以在這邊我已經
創建了一個資料夾

00:00:26.370 --> 00:00:28.515
當我開啟VS Code

00:00:28.515 --> 00:00:30.690
點選 "檔案"
"開啟資料夾"

00:00:30.690 --> 00:00:33.810
開啟我剛才創建的
那個資料夾

00:00:33.810 --> 00:00:36.020
就是那個名為

00:00:36.020 --> 00:00:37.580
"Intro to Python development"
的資料夾

00:00:37.580 --> 00:00:39.590
開啟它

00:00:39.590 --> 00:00:41.000
這個資料夾就成了我的工作資料夾
(working folder)

00:00:41.000 --> 00:00:43.820
在這資料夾中存放了
這個專案所需的所有檔案

00:00:43.820 --> 00:00:46.310
一旦我開啟了這個資料夾

00:00:46.310 --> 00:00:48.905
我就會看到
資料名稱列在左手邊

00:00:48.905 --> 00:00:51.500
然後我可以點選
"新增檔案"

00:00:51.500 --> 00:00:54.770
在這個資料夾中
創建新的Python檔案

00:00:54.770 --> 00:00:57.345
接下來
我可以試看看"print"述句

00:00:57.345 --> 00:01:01.035
我們輸入
print("hello world")

00:01:01.035 --> 00:01:04.400
在我給檔案命名之前

00:01:04.400 --> 00:01:06.020
VS Code無法自動判斷出

00:01:06.020 --> 00:01:07.895
我創建的是一個
Python語言

00:01:07.895 --> 00:01:09.920
所以在我存檔時

00:01:09.920 --> 00:01:12.095
我得告訴VS Code
這是Python檔案

00:01:12.095 --> 00:01:14.300
點選"檔案"
"儲存"

00:01:14.300 --> 00:01:18.245
或者使用鍵盤快速鍵
"Ctrl + S"

00:01:18.245 --> 00:01:19.800
都可以讓檔案儲存在
檔案系統中

00:01:19.800 --> 00:01:23.125
確認將它命名為
"helloworld.py"

00:01:23.125 --> 00:01:25.940
重點在副檔名
必須為.py

00:01:25.940 --> 00:01:29.860
這樣VS Code就會知道
剛剛創建的是一個Python檔案

00:01:29.860 --> 00:01:33.110
然後你馬上就會看到
出現一些不同顏色

00:01:33.110 --> 00:01:36.320
這是個好的徵兆

00:01:36.320 --> 00:01:38.000
這表示VS Code的
"Code Highlighting"功能已經啟用

00:01:38.000 --> 00:01:40.715
VS Code已經知道'hello world'
是一個字串，所以用紅色標示出來

00:01:40.715 --> 00:01:42.290
這也表示

00:01:42.290 --> 00:01:45.550
VS Code已經識別
這一段是Python語言

00:01:45.550 --> 00:01:47.660
然後我想執行看看

00:01:47.660 --> 00:01:49.490
執行程式碼
這個動作同時也是

00:01:49.490 --> 00:01:51.050
判斷你的Python環境
是否已經正確安裝

00:01:51.050 --> 00:01:52.910
的終極測試

00:01:52.910 --> 00:01:56.210
你只需鍵入"Python"、空格
然後你的檔案名稱

00:01:56.210 --> 00:01:58.570
我的檔案名稱是
"helloworld.py"

00:01:58.570 --> 00:01:59.760
如果你忘記了檔案名稱

00:01:59.760 --> 00:02:01.605
別擔心
檔案名稱就在頁籤的頂部

00:02:01.605 --> 00:02:03.825
然後你按下"Enter"按鍵

00:02:03.825 --> 00:02:06.165
"hello world"
果然就顯示在螢幕上了

00:02:06.165 --> 00:02:09.775
所以我成功執行了
我的第一個Python程式

00:02:09.775 --> 00:02:11.900
而事實上Python語言允許使用

00:02:11.900 --> 00:02:14.180
單引號或雙引號來圍繞字串

00:02:14.180 --> 00:02:17.935
我再次存檔

00:02:17.935 --> 00:02:20.060
回到"命令列"

00:02:20.060 --> 00:02:23.165
按下鍵盤的上箭號
它會跳出上一次執行的的指令

00:02:23.165 --> 00:02:24.665
重新執行我的程式

00:02:24.665 --> 00:02:26.840
但這次用雙引號圍繞字串

00:02:26.840 --> 00:02:29.170
果然執行結果與上次相同

00:02:29.170 --> 00:02:30.810
所以正如我剛才提到的

00:02:30.810 --> 00:02:33.630
單引號或雙引號
都能正常執行

00:02:33.630 --> 00:02:36.460
那麼如果我想要
執行時輸入一個值？

00:02:36.460 --> 00:02:39.230
我可以創造一個
名為"name"的變數

00:02:39.230 --> 00:02:44.250
然後等於
input("What is your name?")

00:02:44.270 --> 00:02:47.250
然後一樣輸出"hello"

00:02:47.250 --> 00:02:49.420
但在之後

00:02:49.420 --> 00:02:51.050
我想在螢幕上輸出一個名字

00:02:51.050 --> 00:02:53.915
讓我們向輸入的名字問好

00:02:53.915 --> 00:02:56.255
存檔

00:02:56.255 --> 00:02:59.205
重新執行程式

00:02:59.205 --> 00:03:00.390
程式問我的名字是甚麼？

00:03:00.390 --> 00:03:02.040
我叫蘇珊

00:03:02.040 --> 00:03:04.730
現在我們看見螢幕上出現
"你好蘇珊"

00:03:04.730 --> 00:03:07.010
因此我們知道
"input"函數是一種

00:03:07.010 --> 00:03:09.350
讓我能要求使用者
輸入資訊的方法

00:03:09.350 --> 00:03:10.550
然後將獲取得的資訊

00:03:10.550 --> 00:03:12.830
儲存在某個變數中

00:03:12.830 --> 00:03:15.350
一旦我們學會

00:03:15.350 --> 00:03:16.835
在螢幕上顯示多行輸出後

00:03:16.835 --> 00:03:18.560
你可能想製造更多行的輸出

00:03:18.560 --> 00:03:22.865
例如你可以只輸出 "hello"

00:03:22.865 --> 00:03:26.610
然後在另一行輸出 "world"

00:03:26.610 --> 00:03:30.210
你會注意到其結果就
分別顯示在兩行

00:03:32.600 --> 00:03:36.350
"hello" 跟 "world"
出現在不同行

00:03:36.350 --> 00:03:38.210
我還要另外告訴你
一個有用的小指令

00:03:38.210 --> 00:03:39.560
在VS Code裡

00:03:39.560 --> 00:03:42.230
命令列輸出的最底部

00:03:42.230 --> 00:03:44.540
只要鍵入"CLS"
我們將清除

00:03:44.540 --> 00:03:46.940
螢幕上之前所有的輸出
並帶我們回到命令列的頂部

00:03:46.940 --> 00:03:48.440
當你有大量的輸出
顯示在螢幕上時

00:03:48.440 --> 00:03:50.555
這個小技巧相當有用

00:03:50.555 --> 00:03:52.610
製造多行輸出的另一種方法

00:03:52.610 --> 00:03:54.755
就是使用"\n"

00:03:54.755 --> 00:03:59.195
"\n"是一種跳脫字元

00:03:59.195 --> 00:04:00.865
意思是在這裡插入新行

00:04:00.865 --> 00:04:06.860
因此，這一行程式碼將可以產生
兩行的輸出結果

00:04:06.860 --> 00:04:12.140
所以"\n"是一種在字串中
插入新行的方法

00:04:12.140 --> 00:04:15.360
這在使用時非常方便

00:04:15.360 --> 00:04:17.809
尤其要在主控台應用程式中
顯示輸出結果

00:04:17.809 --> 00:04:19.790
但正如我剛才提到的

00:04:19.790 --> 00:04:22.190
當開發者在為程式除錯時
"print"也是非常常用的函數

00:04:22.190 --> 00:04:25.505
例如我若要寫一些程式
來做數學運算

00:04:25.505 --> 00:04:30.150
x 等於 532 加 12

00:04:30.150 --> 00:04:33.845
然後 y 等於 x 除以 0

00:04:33.845 --> 00:04:37.220
我們都知道除以0
會導致錯誤

00:04:37.220 --> 00:04:38.765
然後我使用"print"

00:04:38.765 --> 00:04:42.310
耶～
我做了數學運算

00:04:43.040 --> 00:04:46.310
我寫了一個非常簡單的小程式

00:04:46.310 --> 00:04:48.680
存檔
然後移到下面

00:04:48.680 --> 00:04:50.240
執行這個程式

00:04:50.240 --> 00:04:52.010
然後它爆炸了

00:04:52.010 --> 00:04:54.365
我用一個非常簡單的範例

00:04:54.365 --> 00:04:55.820
你可以看看我的程式碼

00:04:55.820 --> 00:04:57.500
並猜到哪行程式碼讓他爆炸

00:04:57.500 --> 00:04:59.105
就是除以0

00:04:59.105 --> 00:05:01.640
但如果這發生在一個五六百行

00:05:01.640 --> 00:05:04.700
有一堆模組和功能的程式中呢？

00:05:04.700 --> 00:05:06.320
通常這時會相當難以找出

00:05:06.320 --> 00:05:08.270
到底是哪一行程式讓他爆炸

00:05:08.270 --> 00:05:09.920
即使在錯誤訊息中
明確告訴你發生錯誤的行數

00:05:09.920 --> 00:05:12.245
但這通常僅是一個提示
不一定就是你該修改的地方

00:05:12.245 --> 00:05:15.050
所以有時候當我試圖
對我程式除錯時

00:05:15.050 --> 00:05:16.550
我會加一些文字，例如：

00:05:16.550 --> 00:05:19.670
"adding numbers"

00:05:19.670 --> 00:05:21.290
抱歉
我應該在這裡使用單引號

00:05:21.290 --> 00:05:23.825
'adding numbers'
然後加上我的數字

00:05:23.825 --> 00:05:25.150
然後我會寫 "print"

00:05:25.150 --> 00:05:29.185
'dividing numbers'
然後才寫除法的程式

00:05:29.185 --> 00:05:31.400
然後加一行"print"述句
說

00:05:31.400 --> 00:05:32.735
"是的，我做了數學"

00:05:32.735 --> 00:05:36.270
這樣一來，當我執行我的程式時

00:05:37.120 --> 00:05:40.610
你可以看到它輸出了
"adding numbers"

00:05:40.610 --> 00:05:42.305
然後輸出
"dividing numbers"

00:05:42.305 --> 00:05:43.940
然後我才收到錯誤訊息

00:05:43.940 --> 00:05:46.580
這樣可以幫助我
透過回朔自己的程式碼

00:05:46.580 --> 00:05:50.060
找出那些程式碼
有被成功執行

00:05:50.060 --> 00:05:51.740
而那些
沒有輸出結果的程式碼

00:05:51.740 --> 00:05:53.825
則可能是因為執行順序
排在錯誤發生的地方之後

00:05:53.825 --> 00:05:57.410
所以當你在學習寫程式

00:05:57.410 --> 00:05:59.490
不要害怕使用"print"
作為除錯工具

