WEBVTT

00:00:04.670 --> 00:00:08.400
>> 在之前的課程

00:00:08.400 --> 00:00:10.230
我們了解了如何取得字串

00:00:10.230 --> 00:00:13.155
並用加號把字串結合起來

00:00:13.155 --> 00:00:16.110
我們已經看過這張投影片

00:00:16.110 --> 00:00:19.355
如果你仔細看看第四行

00:00:19.355 --> 00:00:23.100
你會注意到
這行有很多事情在發生

00:00:23.100 --> 00:00:29.190
我在這中間敲了一個加號

00:00:29.190 --> 00:00:31.290
然後是一個字串

00:00:31.290 --> 00:00:33.270
然後又一個加號

00:00:33.270 --> 00:00:34.815
然後在一個字串

00:00:34.815 --> 00:00:36.330
還有一個加號

00:00:36.330 --> 00:00:38.190
最後又一個字串

00:00:38.190 --> 00:00:43.095
這樣一直延長下去
很快就會讓這一行

00:00:43.095 --> 00:00:45.815
看起來很醜
也很難一眼就了解

00:00:45.815 --> 00:00:49.160
考慮到我們可能
還會使用到capitalize()、

00:00:49.160 --> 00:00:51.020
upper()或lower()

00:00:51.020 --> 00:00:54.620
或一些其他輔助方法

00:00:54.620 --> 00:00:57.680
所以我們的程式碼
只會變得越來越長

00:00:57.680 --> 00:00:59.765
越來越長

00:00:59.765 --> 00:01:02.800
因此，讓我們嘗試把它簡化

00:01:02.800 --> 00:01:06.920
這就是字串的
format()方法的功能

00:01:06.920 --> 00:01:11.450
我們來看看怎麼用

00:01:11.450 --> 00:01:13.490
第一行是我們剛才
使用的方法

00:01:13.490 --> 00:01:16.345
運用加號串接字串

00:01:16.345 --> 00:01:21.670
第二行跟第三行我們則用

00:01:21.670 --> 00:01:24.020
一對大括號來
代表一個預留位置

00:01:24.020 --> 00:01:26.120
而你可以在投影片上看到

00:01:26.120 --> 00:01:30.880
這三行的輸出結果
是完全相同的

00:01:30.880 --> 00:01:33.305
而在程式寫法上
其實只有一點點不同

00:01:33.305 --> 00:01:34.910
首先來看第二行

00:01:34.910 --> 00:01:38.420
我們在這裡
用兩對大括號

00:01:38.420 --> 00:01:43.105
當作兩個預留位置

00:01:43.105 --> 00:01:47.120
它會基於

00:01:47.120 --> 00:01:52.115
先後順序指定參數

00:01:52.115 --> 00:01:53.740
所以第一個在那裡

00:01:53.740 --> 00:01:56.070
將是"first_name"的預留位置

00:01:56.070 --> 00:01:57.900
第二個

00:01:57.900 --> 00:02:02.200
則是"last_name"的預留位置

00:02:02.230 --> 00:02:06.545
而如果我們想要特別指定

00:02:06.545 --> 00:02:12.605
我們可以在
大括號中放數字

00:02:12.605 --> 00:02:15.500
我們在第三行用了
0 跟 1

00:02:15.500 --> 00:02:20.350
分別代表
對應第一個和第二個變數

00:02:20.350 --> 00:02:23.580
記住
計數將從0開始

00:02:23.580 --> 00:02:26.730
在大多電腦語言中
0都代表第一個項目

00:02:26.730 --> 00:02:29.485
而1才代表第二個項目

00:02:29.485 --> 00:02:31.725
現在回到我們的範例程式

00:02:31.725 --> 00:02:33.525
第二行跟第三行

00:02:33.525 --> 00:02:36.170
實際上是一樣的

00:02:36.170 --> 00:02:39.530
但如果我在別的地方

00:02:39.530 --> 00:02:41.945
也需要用到
這些相同的字串

00:02:41.945 --> 00:02:44.840
或者我就是想要
把編號標記下來

00:02:44.840 --> 00:02:46.970
這是第一個、
這是第二個

00:02:46.970 --> 00:02:48.410
這是第三個，等等

00:02:48.410 --> 00:02:50.690
然後我放入0

00:02:50.690 --> 00:02:54.250
1, 2 也許更多

00:02:54.250 --> 00:02:58.909
至於最後一行
我想先強調一下

00:02:58.909 --> 00:03:02.530
我要確保

00:03:02.530 --> 00:03:03.975
我有提到

00:03:03.975 --> 00:03:05.690
這個事實

00:03:05.690 --> 00:03:08.510
這是

00:03:08.510 --> 00:03:11.240
最後一行僅在Python 3
可以正常執行

00:03:11.240 --> 00:03:14.510
所以如果你因為某些原因
必須使用Python 2

00:03:14.510 --> 00:03:17.140
最後這一行在Python 2
是會產生錯誤的

00:03:17.140 --> 00:03:20.025
但它在Python3
將正常執行

00:03:20.025 --> 00:03:24.825
把 f 放在最前面

00:03:24.825 --> 00:03:26.415
f 的意思是
格式(format)

00:03:26.415 --> 00:03:30.335
我很喜歡Python 3的
這個新功能

00:03:30.335 --> 00:03:33.770
我現在只要

00:03:33.770 --> 00:03:38.390
把我的變數直接放在大括號中
跟其他字串一起，不用改變順序

00:03:38.390 --> 00:03:40.565
這是現在我每次做字串串接

00:03:40.565 --> 00:03:43.030
最愛使用的寫法

00:03:43.030 --> 00:03:47.030
因為它很清楚
這是種「自我記錄」的風格

00:03:47.030 --> 00:03:49.940
自我紀錄的風格永遠是好的

00:03:49.940 --> 00:03:52.340
也許哪一天有人來讀你的這段程式碼

00:03:52.340 --> 00:03:55.655
只要理解 f 放在開頭的意義

00:03:55.655 --> 00:03:58.415
他們很容易理解

00:03:58.415 --> 00:04:00.080
哦
這裡是變數"first_name"

00:04:00.080 --> 00:04:02.540
這是變數"last_name"

00:04:02.540 --> 00:04:04.940
讓我們在下一單元課程

00:04:04.940 --> 00:04:08.490
繼續看看這一切
是如何運作的

