WEBVTT

00:00:03.290 --> 00:00:07.630
>> 好的，一旦我們要寫
更複雜的程式

00:00:07.630 --> 00:00:09.310
在某些時候
你需要能夠

00:00:09.310 --> 00:00:11.305
在某種狀況下
做某些事

00:00:11.305 --> 00:00:13.540
而在其他狀況下
做出不同反應

00:00:13.540 --> 00:00:15.100
所以這就是
為什麼我們需要

00:00:15.100 --> 00:00:17.600
程式中的
條件判斷

00:00:17.600 --> 00:00:20.320
基本上
你需要能夠

00:00:20.320 --> 00:00:23.170
根據不同的狀況
做出不同的反應

00:00:23.170 --> 00:00:26.090
例如在加拿大
一個常見的狀況是

00:00:26.090 --> 00:00:28.345
我們有各種
不同的稅率

00:00:28.345 --> 00:00:30.880
取決於你住
國內哪個省

00:00:30.880 --> 00:00:33.575
在美國則取決於
你生活在哪一州

00:00:33.575 --> 00:00:35.440
這也取決於商品價格

00:00:35.440 --> 00:00:37.870
例如你在加拿大買速食

00:00:37.870 --> 00:00:41.035
任何價格低於
1美元的東西

00:00:41.035 --> 00:00:42.500
你不用交稅

00:00:42.500 --> 00:00:44.180
所以當我們計算稅率時

00:00:44.180 --> 00:00:45.740
我們會說：如果價格

00:00:45.740 --> 00:00:48.190
超過一美元或
等於一美元

00:00:48.190 --> 00:00:50.135
我們收一定數額的稅

00:00:50.135 --> 00:00:53.965
在Python中我可以
添加"if"述句

00:00:53.965 --> 00:00:55.880
語法是這樣的：

00:00:55.880 --> 00:00:57.665
用"if"開頭

00:00:57.665 --> 00:00:59.210
這是相當明顯的

00:00:59.210 --> 00:01:03.695
如果我的價格高於
或等於 1 美元

00:01:03.695 --> 00:01:06.080
然後我要
執行程式碼

00:01:06.080 --> 00:01:07.730
有幾件事要注意

00:01:07.730 --> 00:01:10.430
"if"述句的句尾
一定有冒號

00:01:10.430 --> 00:01:13.910
這是Python的特殊語法
然後下一行要縮排

00:01:13.910 --> 00:01:16.220
這是故意的

00:01:16.220 --> 00:01:19.250
冒號之後的下一行開始
必須縮排四個空格

00:01:19.250 --> 00:01:21.750
要注意它是四個空格
而不是一個"Tab"的空間

00:01:21.750 --> 00:01:23.540
雖然如果你
使用VS Code

00:01:23.540 --> 00:01:25.460
它會幫你自動更正
所以你實際上可以

00:01:25.460 --> 00:01:27.380
在VS Code中按"Tab"鍵
來取代敲四個空格鍵

00:01:27.380 --> 00:01:30.310
但請記得這一點
這裡是"四個空格"

00:01:30.310 --> 00:01:33.770
而任何由四個空格開頭
且在"if"之後的程式碼

00:01:33.770 --> 00:01:37.450
只有在價格大於或等於 $1 時
才會被執行

00:01:37.450 --> 00:01:40.310
現在，我用的是大於
或等於的符號 ( >= )

00:01:40.310 --> 00:01:41.750
取決於不同條件

00:01:41.750 --> 00:01:43.430
我們會使用不同的符號

00:01:43.430 --> 00:01:44.885
大於、小於

00:01:44.885 --> 00:01:48.315
大於等於、小於等於

00:01:48.315 --> 00:01:49.805
而最重要的兩個

00:01:49.805 --> 00:01:51.440
等於跟不等於

00:01:51.440 --> 00:01:54.170
不同程式語言
可能會用不同符號

00:01:54.170 --> 00:01:56.990
在Python中

00:01:56.990 --> 00:01:59.450
等於
是兩個等號

00:01:59.450 --> 00:02:03.600
不等於
是一個驚嘆號加一個等號

00:02:03.950 --> 00:02:07.655
我們還可以添加一個
"else:"

00:02:07.655 --> 00:02:10.055
意思就是如果"if"
敘述的條件成立了

00:02:10.055 --> 00:02:12.595
就將稅率設定為百分之七

00:02:12.595 --> 00:02:14.930
但如果條件不成立

00:02:14.930 --> 00:02:16.955
也就是"price"小於 1.0

00:02:16.955 --> 00:02:18.650
而確實在加拿大的
規定就是

00:02:18.650 --> 00:02:20.495
如果價格超過一元

00:02:20.495 --> 00:02:23.840
要扣百分之七
所謂的服務稅

00:02:23.840 --> 00:02:25.745
否則，無需扣稅

00:02:25.745 --> 00:02:27.050
所以我可以用

00:02:27.050 --> 00:02:29.810
"else:"
記得後面要加冒號

00:02:29.810 --> 00:02:31.550
我以前常常忘記

00:02:31.550 --> 00:02:33.200
而必須回頭修正

00:02:33.200 --> 00:02:34.880
這個語法錯誤

00:02:34.880 --> 00:02:37.030
對，就是你從從克里斯多夫
那裡學到的語法錯誤

00:02:37.030 --> 00:02:39.140
然後一樣的
下一行開始必須縮排

00:02:39.140 --> 00:02:43.085
必須要是四個空格
才會執行

00:02:43.085 --> 00:02:46.215
縮不縮排真的
會改變執行方式

00:02:46.215 --> 00:02:49.955
我可以用另一個不同的方法
來寫完全一樣的程式

00:02:49.955 --> 00:02:51.830
基本上我想要

00:02:51.830 --> 00:02:53.780
計算稅率
然後輸出

00:02:53.780 --> 00:02:57.530
所以在這裡我說，如果
"price >= 1.00:"

00:02:57.530 --> 00:02:59.480
將稅率設為 0.7
然後輸出它

00:02:59.480 --> 00:03:01.925
否則，把稅率設成 0
並列印它

00:03:01.925 --> 00:03:04.340
或者我可以說
如果價格超過 1 元

00:03:04.340 --> 00:03:06.465
稅率設為 0.7
否則設為 0

00:03:06.465 --> 00:03:09.469
當我計算出
正確的稅率

00:03:09.469 --> 00:03:11.605
就輸出它

00:03:11.605 --> 00:03:14.450
這兩種寫法都能做到
完全一樣的事情

00:03:14.450 --> 00:03:15.980
你應該使用哪一個？

00:03:15.980 --> 00:03:17.060
我喜歡右邊的那種

00:03:17.060 --> 00:03:18.590
比較優雅

00:03:18.590 --> 00:03:20.495
不重複"print()"述句

00:03:20.495 --> 00:03:22.550
但如果你會覺得困惑

00:03:22.550 --> 00:03:25.350
左邊的寫法
也沒有什麼錯

00:03:25.880 --> 00:03:30.240
然後，當你比較字串時

00:03:30.240 --> 00:03:32.210
要特別注意

00:03:32.210 --> 00:03:34.100
如果你執行這段程式

00:03:34.100 --> 00:03:36.065
看看是否有人
是加拿大人

00:03:36.065 --> 00:03:39.120
我問某人是哪一個國人？
然後他們輸入"Canada"

00:03:39.120 --> 00:03:41.750
我寫"if country == 'canada':"

00:03:41.750 --> 00:03:45.035
記住要用兩個等號

00:03:45.035 --> 00:03:46.870
然後輸出
"哦，有個加拿大人"

00:03:46.870 --> 00:03:48.440
顯然輸入的字串
也是"加拿大"

00:03:48.440 --> 00:03:52.190
但結果卻輸出：
你不是加拿大人

00:03:52.190 --> 00:03:55.355
它沒有比對正確
出了甚麼問題？

00:03:55.355 --> 00:03:57.830
因為字串比對
會區分大小寫

00:03:57.830 --> 00:04:00.875
所以當你寫：
這個字串等於這個字串

00:04:00.875 --> 00:04:02.990
如果一個是大寫
一個是小寫

00:04:02.990 --> 00:04:06.685
Python會說
這並不一樣

00:04:06.685 --> 00:04:08.625
那麼我該如何修復它呢？

00:04:08.625 --> 00:04:10.430
我們可以回想一下

00:04:10.430 --> 00:04:12.920
之前在學字串函數時

00:04:12.920 --> 00:04:14.780
我們用過幾個函數

00:04:14.780 --> 00:04:17.270
可以把字串轉換成
大寫或小寫

00:04:17.270 --> 00:04:18.935
因此我們可以試著

00:04:18.935 --> 00:04:20.930
將取得的值
全部轉換為小寫

00:04:20.930 --> 00:04:22.880
然後再比較

00:04:22.880 --> 00:04:25.070
是不是"canada"

00:04:25.070 --> 00:04:26.705
所以當有人鍵入字串

00:04:26.705 --> 00:04:29.360
不管他們輸入的內容
有沒有大寫或小寫

00:04:29.360 --> 00:04:31.250
都會先全部轉換成小寫
再做字串比較

00:04:31.250 --> 00:04:34.130
這樣就解掉這個bug

00:04:34.130 --> 00:04:37.400
這是一個很好的
執行期錯誤的例子

00:04:37.400 --> 00:04:41.030
以一種我能發現的方式發生
然後我修正我的程式來解決它

00:04:41.030 --> 00:04:43.610
所以條件判斷
是非常重要的

00:04:43.610 --> 00:04:46.325
它讓我們的程式
能根據不同的情況作出反應

00:04:46.325 --> 00:04:48.800
所以接下來讓我們
再多看一些例子

00:04:48.800 --> 00:04:50.330
在我們進入

00:04:50.330 --> 00:04:53.030
更複雜的"if"述句類型之前

