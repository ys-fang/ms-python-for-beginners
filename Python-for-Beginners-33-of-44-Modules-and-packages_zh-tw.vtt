WEBVTT

00:00:13.040 --> 00:00:17.790
>> 在上一集中，蘇珊介紹了函數

00:00:17.790 --> 00:00:22.680
函數讓你能重複使用程式碼
並增加了可讀性

00:00:22.680 --> 00:00:25.230
現在，假設你決定

00:00:25.230 --> 00:00:27.645
採取少數功能
你創建的

00:00:27.645 --> 00:00:29.550
現在如果你想在你
目前的應用程式中

00:00:29.550 --> 00:00:31.650
或你未來會寫的
應用程式中

00:00:31.650 --> 00:00:33.810
重複使用這些

00:00:33.810 --> 00:00:35.820
你已經寫好的函數

00:00:35.820 --> 00:00:39.194
方式就是透過套件

00:00:39.194 --> 00:00:43.490
將模組匯入個別的專案中

00:00:43.490 --> 00:00:46.070
然後使用模組

00:00:46.070 --> 00:00:48.170
好，我們就先從如何

00:00:48.170 --> 00:00:50.330
自己創建模組開始吧

00:00:50.330 --> 00:00:54.470
就如投影片上寫的

00:00:54.470 --> 00:00:56.540
模組其實就只是

00:00:56.540 --> 00:00:58.880
一個包含了一些

00:00:58.880 --> 00:01:01.339
你會重複使用到的

00:01:01.339 --> 00:01:04.340
函數和類別的

00:01:04.340 --> 00:01:06.320
Python檔案

00:01:06.320 --> 00:01:09.985
就這麼簡單，模組就是一個Python檔案
裡面有一堆函數和類別

00:01:09.985 --> 00:01:11.430
那為什麼要設置它們呢？

00:01:11.430 --> 00:01:13.490
因為模組給你一個機會

00:01:13.490 --> 00:01:15.470
將你的程式碼分解為

00:01:15.470 --> 00:01:18.335
一個個可重複使用的模組

00:01:18.335 --> 00:01:22.825
同時也讓你的程式更具可讀性

00:01:22.825 --> 00:01:24.910
要創建一個模組

00:01:24.910 --> 00:01:26.495
其實很容易

00:01:26.495 --> 00:01:29.420
你只需要創建一個檔案

00:01:29.420 --> 00:01:32.360
在這個範例中
我把檔案命名為"helpers.py"

00:01:32.360 --> 00:01:34.960
然後加入你的程式碼

00:01:34.960 --> 00:01:38.480
所以你看看這個函數

00:01:38.480 --> 00:01:40.895
其實沒甚麼特別的

00:01:40.895 --> 00:01:42.860
蘇珊已經在上一集告訴我們

00:01:42.860 --> 00:01:45.545
這樣的函數在寫甚麼

00:01:45.545 --> 00:01:49.465
這只是個模組的簡單範例

00:01:49.465 --> 00:01:52.580
好，來看看模組怎麼使用

00:01:52.580 --> 00:01:55.700
我們只需要匯入(import)它

00:01:55.700 --> 00:01:58.490
投影片上有三段程式碼

00:01:58.490 --> 00:01:59.960
但需要特別

00:01:59.960 --> 00:02:02.180
強調的是

00:02:02.180 --> 00:02:05.945
三段程式碼實際上
在做同樣的事情

00:02:05.945 --> 00:02:08.825
只是用了
三種不同的寫法

00:02:08.825 --> 00:02:10.565
根據你選了哪一種

00:02:10.565 --> 00:02:14.315
對你的程式碼
會有一些小小的影響

00:02:14.315 --> 00:02:18.590
然而在性能上並沒有差異

00:02:18.590 --> 00:02:22.550
差別只在於如何存取

00:02:22.550 --> 00:02:27.410
模組內部的東西

00:02:27.410 --> 00:02:31.460
我用螢光筆來標示

00:02:31.460 --> 00:02:33.530
"import helpers"

00:02:33.530 --> 00:02:35.750
import就是
從某個檔案匯入

00:02:35.750 --> 00:02:40.430
"helpers"是
我們創建的py檔的主檔名

00:02:40.430 --> 00:02:45.505
如果你還記得
其中有一個"display"函數

00:02:45.505 --> 00:02:49.100
所以我為了要
呼叫"display"函數

00:02:49.100 --> 00:02:51.725
我必須先導入"helpers"

00:02:51.725 --> 00:02:56.150
導入之後，我就可以寫：
"helpers.display()"

00:02:56.150 --> 00:02:58.715
那麼上面的程式碼做了什麼呢？

00:02:58.715 --> 00:03:01.160
它自動把"helpers.py"中

00:03:01.160 --> 00:03:06.350
所有的函數拉出來
放在一個集合內

00:03:06.350 --> 00:03:08.630
讓你在下面的程式中使用

00:03:08.630 --> 00:03:11.120
這個集合又稱為「命名空間」

00:03:11.120 --> 00:03:13.805
所以當我想要的東西
在這個集合中

00:03:13.805 --> 00:03:15.994
我只要鍵入命名空間的名稱

00:03:15.994 --> 00:03:17.680
以這個範例來說是，是"helpers"

00:03:17.680 --> 00:03:21.335
一個點
然後接函數名稱

00:03:21.335 --> 00:03:24.530
而如果我想要
使用這個集合裡面的所有東西

00:03:24.530 --> 00:03:27.580
但我不想每次使用都得
先敲"helpers"，怎麼辦？

00:03:27.580 --> 00:03:30.290
嗯，可以做到

00:03:30.290 --> 00:03:33.425
方法就是改一下匯入的寫法

00:03:33.425 --> 00:03:35.555
從"import helpers"

00:03:35.555 --> 00:03:37.670
改成"from helpers"

00:03:37.670 --> 00:03:40.355
"import *"

00:03:40.355 --> 00:03:43.265
之前是匯入"helpers"模組

00:03:43.265 --> 00:03:45.830
現在則是從"helpers"模組中

00:03:45.830 --> 00:03:48.380
匯入所有東西

00:03:48.380 --> 00:03:52.675
這個星號就是"全部"的意思

00:03:52.675 --> 00:03:55.184
一旦我導入所有東西

00:03:55.184 --> 00:03:57.545
那這個模組中的所有東西

00:03:57.545 --> 00:04:00.305
在目前這個程式中
就變成隨處可用

00:04:00.305 --> 00:04:03.695
技術上來說就是

00:04:03.695 --> 00:04:07.820
該模組裡的所有東西被匯入了
本地命名空間(local namespace)

00:04:07.820 --> 00:04:09.360
那實際影響是什麼呢？

00:04:09.360 --> 00:04:13.130
就是當我想使用"display"時

00:04:13.130 --> 00:04:17.075
我只要簡單地說"display"

00:04:17.075 --> 00:04:19.940
讓我清除

00:04:19.940 --> 00:04:24.935
投影片上的標記

00:04:24.935 --> 00:04:27.020
重新標示一次

00:04:27.020 --> 00:04:31.490
這兩種寫法

00:04:31.490 --> 00:04:34.190
唯一的區別

00:04:34.190 --> 00:04:37.490
就是之後呼叫函數時

00:04:37.490 --> 00:04:40.430
需不需要

00:04:40.430 --> 00:04:43.655
先敲"helpers"當「前綴」

00:04:43.655 --> 00:04:45.805
我想再強調一次

00:04:45.805 --> 00:04:48.645
沒有邏輯上的差異

00:04:48.645 --> 00:04:50.950
也沒有性能上的差異

00:04:50.950 --> 00:04:56.095
唯一的區別只是
字面上怎麼呼叫它

00:04:56.095 --> 00:04:57.560
很多時候

00:04:57.560 --> 00:05:00.560
它就只是個人喜好的問題

00:05:00.560 --> 00:05:03.380
使用前綴可以增加
程式碼的可讀性

00:05:03.380 --> 00:05:06.020
因為明確知道
某個函數是哪個模組來的

00:05:06.020 --> 00:05:08.360
但有時候

00:05:08.360 --> 00:05:10.885
我就是不想打那麼多字

00:05:10.885 --> 00:05:13.175
你可以自行選擇
你喜歡的風格

00:05:13.175 --> 00:05:18.860
最後一個"import"的寫法

00:05:18.860 --> 00:05:24.880
是只匯入模組中的
特定幾個項目

00:05:24.880 --> 00:05:28.355
這跟第二個寫法很像

00:05:28.355 --> 00:05:30.950
唯一的區別是

00:05:30.950 --> 00:05:35.030
不使用星號

00:05:35.030 --> 00:05:38.825
去匯入所有東西

00:05:38.825 --> 00:05:43.720
而只匯入一個

00:05:43.720 --> 00:05:47.655
指定的項目

00:05:47.655 --> 00:05:49.935
在投影片的最底部

00:05:49.935 --> 00:05:53.060
你可以看到我呼叫"display"

00:05:53.060 --> 00:05:55.010
以這個範例來說

00:05:55.010 --> 00:05:56.180
第二個寫法跟第三個寫法

00:05:56.180 --> 00:05:58.080
實際上的結果是完全一樣的

00:05:58.080 --> 00:05:59.120
因為"helpers.py"中只有一個函數

00:05:59.120 --> 00:06:02.150
所以在呼叫"display()"的寫法

00:06:02.150 --> 00:06:05.575
也是完全一樣

00:06:05.575 --> 00:06:09.110
那只匯入一個或幾個項目有甚麼好處？

00:06:09.110 --> 00:06:14.570
因為可以讓當前的
命名空間保持乾淨

00:06:14.570 --> 00:06:17.390
我們常會遇到的
一個問題就是

00:06:17.390 --> 00:06:20.059
如果你從一個大模組
匯入所有東西

00:06:20.059 --> 00:06:23.720
會讓VS Code的"IntelliSense"
變得雜亂無章

00:06:23.720 --> 00:06:26.090
你每敲一個鍵

00:06:26.090 --> 00:06:28.220
都帶出一個龐大的候選清單

00:06:28.220 --> 00:06:30.590
所以，如果你知道你只需要

00:06:30.590 --> 00:06:32.645
模組中的
一個或兩個、三個項目

00:06:32.645 --> 00:06:37.915
最好就只是具名的
匯入這些項目

00:06:37.915 --> 00:06:39.980
就我個人而言

00:06:39.980 --> 00:06:44.210
我通常傾向于
使用第三種寫法

00:06:44.210 --> 00:06:49.085
我寧願多打一些字
只匯入我需要的項目

00:06:49.085 --> 00:06:50.690
不過再次強調

00:06:50.690 --> 00:06:53.950
這只是一個個人喜好的問題

00:06:53.950 --> 00:06:57.650
唯一會造成問題的就是

00:06:57.650 --> 00:07:02.905
如果你在兩個不同模組中
有名稱完全一樣的函數或類別

00:07:02.905 --> 00:07:05.780
好，這是一個我們創造的模組

00:07:05.780 --> 00:07:09.265
但如何取得別人
創造的模組呢？

00:07:09.265 --> 00:07:12.635
嗯，這就是「套件」的功用

00:07:12.635 --> 00:07:18.380
套件就是一個發佈出來的
一堆模組的集合

00:07:18.380 --> 00:07:20.065
就這麼簡單

00:07:20.065 --> 00:07:22.430
當我們講到套件時

00:07:22.430 --> 00:07:25.640
第一個會遇到的問題就是

00:07:25.640 --> 00:07:27.970
我要如何知道
有哪些套件可用？

00:07:27.970 --> 00:07:32.700
除了靠使用經驗

00:07:32.700 --> 00:07:35.779
如果你想要上網搜尋

00:07:35.779 --> 00:07:40.460
有一個完整的可用套件索引

00:07:40.460 --> 00:07:45.395
稱作"Python Package Index"
你可以去哪裡搜尋

00:07:45.395 --> 00:07:48.760
你當然也可以
直接使用搜尋引擎

00:07:48.760 --> 00:07:51.320
如果覺得我將要做的事

00:07:51.320 --> 00:07:54.260
應該有別人已經做過了

00:07:54.260 --> 00:07:56.760
我永遠會先上網搜尋

00:07:56.760 --> 00:07:59.630
因為有很大的機會
別人已經寫過了

00:07:59.630 --> 00:08:01.040
就像是你應該不會是
第一個需要汽車的人

00:08:01.040 --> 00:08:03.200
而製造汽車的人

00:08:03.200 --> 00:08:05.465
很可能會把輪胎

00:08:05.465 --> 00:08:07.400
當作一個獨立模組

00:08:07.400 --> 00:08:09.595
所以你不用重新發明輪胎

00:08:09.595 --> 00:08:11.765
只要重用(reuse)
其他人的程式碼

00:08:11.765 --> 00:08:16.445
「世界上最好的程式碼
就是已經寫好的的程式碼」

00:08:16.445 --> 00:08:20.315
所以不要害怕
去使用套件

00:08:20.315 --> 00:08:24.715
和把套件匯入你的程式

00:08:24.715 --> 00:08:26.895
好的，要安裝套件

00:08:26.895 --> 00:08:30.290
你需要做的
就是使用"pip"

00:08:30.290 --> 00:08:34.145
"pip"是命令列安裝程式

00:08:34.145 --> 00:08:37.625
在這個範例中
我用："pip install colorama"

00:08:37.625 --> 00:08:41.540
"colorama"是一個套件

00:08:41.540 --> 00:08:46.300
可以幫助你在輸出文字到螢幕時
輕易的改變文字的顏色

00:08:46.300 --> 00:08:49.160
而如果你有一個

00:08:49.160 --> 00:08:51.770
要安裝套件的清單

00:08:51.770 --> 00:08:54.920
你可以把它寫在一個文字檔

00:08:54.920 --> 00:09:00.170
我們通常會把這個文字檔命名為

00:09:00.170 --> 00:09:02.370
"requirements.txt"

00:09:02.370 --> 00:09:04.460
而這個檔案裏面是甚麼呢？

00:09:04.460 --> 00:09:08.580
讓我們來看看

00:09:08.580 --> 00:09:10.910
它實際上非常直覺

00:09:10.910 --> 00:09:12.845
就只是一個文字檔裡有

00:09:12.845 --> 00:09:15.050
一份清單包含

00:09:15.050 --> 00:09:18.250
你要安裝的所有的套件名稱

00:09:18.250 --> 00:09:20.885
你也可以透過指令列的參數

00:09:20.885 --> 00:09:23.140
來安裝特定版本的套件

00:09:23.140 --> 00:09:26.525
你可以去查線上文件
看怎麼下參數

00:09:26.525 --> 00:09:30.545
而若沒有另外的參數
就會安裝最新版本

00:09:30.545 --> 00:09:32.960
通常你要的也是最新版本

00:09:32.960 --> 00:09:36.530
但有時，版本的差異可能導致問題

00:09:36.530 --> 00:09:40.205
你需要知道有這種可能性

00:09:40.205 --> 00:09:41.865
所以有時你會需要

00:09:41.865 --> 00:09:44.380
套件的特定版本

00:09:44.380 --> 00:09:46.010
你可以去查"pip"的說明文件

00:09:46.010 --> 00:09:48.155
不過，大多數時候

00:09:48.155 --> 00:09:50.810
你需要的只是最新版本

00:09:50.810 --> 00:09:54.145
這也是"pip"指令預設
會安裝的版本

00:09:54.145 --> 00:09:57.635
好。現在是一個喊暫停的好時間

00:09:57.635 --> 00:09:59.930
我們會在下一單元

00:09:59.930 --> 00:10:02.360
討論執行環境

00:10:02.360 --> 00:10:05.570
因為"pip"在某種程度上有點特別
特別是如果你熟悉Node.js

00:10:05.570 --> 00:10:09.410
Python的執行環境可能
會有一些跟你預想的不一樣

00:10:09.410 --> 00:10:12.060
我們在下一單元來看看哪裡不一樣

