WEBVTT

00:00:03.980 --> 00:00:07.005
>> 所以現在讓我們再看一些

00:00:07.005 --> 00:00:09.780
使用"if"做條件判斷的範例

00:00:09.780 --> 00:00:12.090
在這個範例中

00:00:12.090 --> 00:00:15.315
我們用程式來
計算加拿大的稅率

00:00:15.315 --> 00:00:17.204
正如我在之前提過的
在加拿大

00:00:17.204 --> 00:00:21.390
除非商品價格在一塊錢以上
否則是不用扣稅的

00:00:21.390 --> 00:00:23.250
所以我要先問使用者

00:00:23.250 --> 00:00:25.260
他們付了多少錢？

00:00:25.260 --> 00:00:28.170
然後我要字串
轉換為數字

00:00:28.170 --> 00:00:31.125
記得我們之前學到的
資料類型和數字處理

00:00:31.125 --> 00:00:33.480
我們想把這個變數
當作一個數字來處理

00:00:33.480 --> 00:00:35.370
但"input"函數
永遠回傳字串

00:00:35.370 --> 00:00:37.500
所以我必須把
"price"轉換成數字型別

00:00:37.500 --> 00:00:39.000
然後我說

00:00:39.000 --> 00:00:40.800
如果價格超過一元

00:00:40.800 --> 00:00:43.200
那麼稅率是0.07

00:00:43.200 --> 00:00:45.240
也就是百分之七的稅率

00:00:45.240 --> 00:00:47.975
然後我要輸出稅率到螢幕

00:00:47.975 --> 00:00:51.080
讓我們看看執行後
會發生什麼

00:00:51.080 --> 00:00:53.390
在主控台輸入
python

00:00:53.390 --> 00:00:55.385
然後輸入檔名

00:00:55.385 --> 00:00:57.770
我們輸入一個價格

00:00:57.770 --> 00:01:00.605
20元
這絕對超過一元

00:01:00.605 --> 00:01:02.210
我們應該看到稅率 0.07

00:01:02.210 --> 00:01:06.805
果然輸出的稅率是 0.07，

00:01:06.805 --> 00:01:11.330
而如果我們輸入一個價格
譬如我付了0.50元

00:01:11.330 --> 00:01:14.540
你會發現它不會
輸出任何東西

00:01:14.540 --> 00:01:18.200
因為這兩個行有縮排

00:01:18.200 --> 00:01:20.180
這兩個行只有在

00:01:20.180 --> 00:01:22.640
"if"的判斷條件成立時
才會被執行

00:01:22.640 --> 00:01:24.455
再次提醒
縮排就是四個空格

00:01:24.455 --> 00:01:26.660
縮排就是Python
判斷該行是否在

00:01:26.660 --> 00:01:29.680
"if"的條件成立時
才被執行的依據

00:01:29.680 --> 00:01:32.375
接下來，我們加入
"else:"

00:01:32.375 --> 00:01:37.040
我可能想說
如果價格在一元以下

00:01:37.040 --> 00:01:38.735
那我們就不扣稅了

00:01:38.735 --> 00:01:42.350
所以我增加了幾行
跟剛才基本一樣的程式碼

00:01:42.350 --> 00:01:44.360
但是是在"否則"的情況下執行

00:01:44.360 --> 00:01:46.530
也就是"else:"

00:01:46.530 --> 00:01:48.920
記得後面有個冒號

00:01:48.920 --> 00:01:51.440
我自己老是忘記

00:01:51.440 --> 00:01:53.900
這是我最常犯的語法錯誤

00:01:53.900 --> 00:01:56.600
"要不然"
稅率等於 0

00:01:56.600 --> 00:01:58.765
執行

00:01:58.765 --> 00:02:01.695
先清除清除螢幕
重新開始

00:02:01.695 --> 00:02:08.045
"Python add_else.py"
然後我付多少錢？ 50元

00:02:08.045 --> 00:02:10.940
它輸出：稅率為 0.07

00:02:10.940 --> 00:02:15.515
這是正確的
如果再次執行，然後輸入 0.5元

00:02:15.515 --> 00:02:18.990
它返回
稅率為 0

00:02:19.310 --> 00:02:21.650
現在這段程式變得
更乾淨了一點

00:02:21.650 --> 00:02:24.020
也更優雅了一點
我有一個 tax 變數

00:02:24.020 --> 00:02:27.265
會根據使用者輸入的值而改變

00:02:27.265 --> 00:02:31.640
我還有一件事要提
如果你願意

00:02:31.640 --> 00:02:33.440
你可以以
一種不同的寫法

00:02:33.440 --> 00:02:35.630
寫出功能完全一樣的程式

00:02:35.630 --> 00:02:38.930
簡單地拿掉一行"print()"述句

00:02:38.930 --> 00:02:40.610
因為不管稅率如何

00:02:40.610 --> 00:02:43.115
我都要輸出結果

00:02:43.115 --> 00:02:47.810
唯一改變的只是
"tax"變數的值

00:02:47.810 --> 00:02:50.795
所以在我的"if"述句中
我說如果價格超過一元

00:02:50.795 --> 00:02:52.565
稅率設為百分之七

00:02:52.565 --> 00:02:54.200
如果價格低於一元

00:02:54.200 --> 00:02:55.750
稅率設為零

00:02:55.750 --> 00:02:58.910
然後無論最終稅率是多少

00:02:58.910 --> 00:03:00.170
都輸出到螢幕上

00:03:00.170 --> 00:03:04.130
因此通過將"print()"移到
"if"述句之外，取消縮排

00:03:04.130 --> 00:03:06.290
這意味著"print()"
在所有狀況下都會被執行

00:03:06.290 --> 00:03:09.230
無論"if"判斷的結果為何

00:03:09.230 --> 00:03:15.290
現在我重新執行
輸入 50 元

00:03:15.290 --> 00:03:16.970
你仍然會看到
完全相同的輸出

00:03:16.970 --> 00:03:18.860
稅率為百分之七

00:03:18.860 --> 00:03:21.590
如果我輸入 0.25 元

00:03:21.590 --> 00:03:23.795
你會看到稅率為零

00:03:23.795 --> 00:03:26.510
所以結果是完全相同的

00:03:26.510 --> 00:03:29.300
我只是用了
另一種寫法

00:03:29.300 --> 00:03:31.760
現在，我想再舉一個例子

00:03:31.760 --> 00:03:34.145
說明一下「區分大小寫」

00:03:34.145 --> 00:03:37.425
現在我有一行程式

00:03:37.425 --> 00:03:39.215
請輸入名稱
你的祖國

00:03:39.215 --> 00:03:40.610
如果是加拿大

00:03:40.610 --> 00:03:41.735
那你一定喜歡曲棍球

00:03:41.735 --> 00:03:44.015
這就是我在推特上幫自己取名為
"hockey geek girl"的原因

00:03:44.015 --> 00:03:45.815
我是加拿大人，我愛曲棍球

00:03:45.815 --> 00:03:47.320
我符合這個刻板印象

00:03:47.320 --> 00:03:50.370
否則我們會說
"好吧，你不是來自加拿大"

00:03:50.370 --> 00:03:59.105
所以，如果我運行這個程式
檔名是"comparing_strings.py"

00:03:59.105 --> 00:04:00.680
輸入我的國家名稱

00:04:00.680 --> 00:04:03.470
我輸入加拿大，只要我
輸入的字元全部都是小寫

00:04:03.470 --> 00:04:04.775
它輸出："你一定喜歡曲棍球"

00:04:04.775 --> 00:04:06.830
沒錯，Python的結果是正確的

00:04:06.830 --> 00:04:10.790
但如果我再次執行
這次我敲了大寫字母

00:04:10.790 --> 00:04:13.175
那它就會說我
不是加拿大人

00:04:13.175 --> 00:04:15.980
所以這個範例是說明

00:04:15.980 --> 00:04:18.770
請記住，當Python
比較兩個字串

00:04:18.770 --> 00:04:20.660
如果一個字串是大寫
一個字串是小寫

00:04:20.660 --> 00:04:23.045
那會被判斷為不相等

00:04:23.045 --> 00:04:26.735
所以我要做的
就是將傳入的值

00:04:26.735 --> 00:04:28.774
使用"lower()"函數

00:04:28.774 --> 00:04:31.100
轉換為全部小寫

00:04:31.100 --> 00:04:32.990
然後再用小寫版本

00:04:32.990 --> 00:04:35.180
去比對是不是加拿大

00:04:35.180 --> 00:04:37.730
所以現在即使我輸入"books"

00:04:37.730 --> 00:04:39.515
執行前要先存檔

00:04:39.515 --> 00:04:41.930
順便一提

00:04:41.930 --> 00:04:45.210
用快捷鍵"Ctrl + S"
就會存檔

00:04:45.700 --> 00:04:48.410
線再我再次執行它
我輸入加拿大

00:04:48.410 --> 00:04:50.105
即使我輸入的
全部是大寫字母

00:04:50.105 --> 00:04:53.390
它仍然可以正確的回應；
我來自加拿大

00:04:53.390 --> 00:04:55.115
所以我一定喜歡曲棍球

00:04:55.115 --> 00:04:57.170
好的
這就是這一集的內容

00:04:57.170 --> 00:04:58.430
我們會在下一單元
探討如何用條件判斷

00:04:58.430 --> 00:05:02.130
去處理一些更複雜的狀況

